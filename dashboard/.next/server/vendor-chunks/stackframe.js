"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/stackframe";
exports.ids = ["vendor-chunks/stackframe"];
exports.modules = {

/***/ "(ssr)/./node_modules/stackframe/stackframe.js":
/*!***********************************************!*\
  !*** ./node_modules/stackframe/stackframe.js ***!
  \***********************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n(function(root, factory) {\n    \"use strict\";\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n    /* istanbul ignore next */ if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(void 0, function() {\n    \"use strict\";\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n    function _capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.substring(1);\n    }\n    function _getter(p) {\n        return function() {\n            return this[p];\n        };\n    }\n    var booleanProps = [\n        \"isConstructor\",\n        \"isEval\",\n        \"isNative\",\n        \"isToplevel\"\n    ];\n    var numericProps = [\n        \"columnNumber\",\n        \"lineNumber\"\n    ];\n    var stringProps = [\n        \"fileName\",\n        \"functionName\",\n        \"source\"\n    ];\n    var arrayProps = [\n        \"args\"\n    ];\n    var objectProps = [\n        \"evalOrigin\"\n    ];\n    var props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\n    function StackFrame(obj) {\n        if (!obj) return;\n        for(var i = 0; i < props.length; i++){\n            if (obj[props[i]] !== undefined) {\n                this[\"set\" + _capitalize(props[i])](obj[props[i]]);\n            }\n        }\n    }\n    StackFrame.prototype = {\n        getArgs: function() {\n            return this.args;\n        },\n        setArgs: function(v) {\n            if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n                throw new TypeError(\"Args must be an Array\");\n            }\n            this.args = v;\n        },\n        getEvalOrigin: function() {\n            return this.evalOrigin;\n        },\n        setEvalOrigin: function(v) {\n            if (v instanceof StackFrame) {\n                this.evalOrigin = v;\n            } else if (v instanceof Object) {\n                this.evalOrigin = new StackFrame(v);\n            } else {\n                throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n            }\n        },\n        toString: function() {\n            var fileName = this.getFileName() || \"\";\n            var lineNumber = this.getLineNumber() || \"\";\n            var columnNumber = this.getColumnNumber() || \"\";\n            var functionName = this.getFunctionName() || \"\";\n            if (this.getIsEval()) {\n                if (fileName) {\n                    return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n                }\n                return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n            }\n            if (functionName) {\n                return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n            }\n            return fileName + \":\" + lineNumber + \":\" + columnNumber;\n        }\n    };\n    StackFrame.fromString = function StackFrame$$fromString(str) {\n        var argsStartIndex = str.indexOf(\"(\");\n        var argsEndIndex = str.lastIndexOf(\")\");\n        var functionName = str.substring(0, argsStartIndex);\n        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n        var locationString = str.substring(argsEndIndex + 1);\n        if (locationString.indexOf(\"@\") === 0) {\n            var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, \"\");\n            var fileName = parts[1];\n            var lineNumber = parts[2];\n            var columnNumber = parts[3];\n        }\n        return new StackFrame({\n            functionName: functionName,\n            args: args || undefined,\n            fileName: fileName,\n            lineNumber: lineNumber || undefined,\n            columnNumber: columnNumber || undefined\n        });\n    };\n    for(var i = 0; i < booleanProps.length; i++){\n        StackFrame.prototype[\"get\" + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n        StackFrame.prototype[\"set\" + _capitalize(booleanProps[i])] = function(p) {\n            return function(v) {\n                this[p] = Boolean(v);\n            };\n        }(booleanProps[i]);\n    }\n    for(var j = 0; j < numericProps.length; j++){\n        StackFrame.prototype[\"get\" + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n        StackFrame.prototype[\"set\" + _capitalize(numericProps[j])] = function(p) {\n            return function(v) {\n                if (!_isNumber(v)) {\n                    throw new TypeError(p + \" must be a Number\");\n                }\n                this[p] = Number(v);\n            };\n        }(numericProps[j]);\n    }\n    for(var k = 0; k < stringProps.length; k++){\n        StackFrame.prototype[\"get\" + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n        StackFrame.prototype[\"set\" + _capitalize(stringProps[k])] = function(p) {\n            return function(v) {\n                this[p] = String(v);\n            };\n        }(stringProps[k]);\n    }\n    return StackFrame;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/stackframe/stackframe.js\n");

/***/ })

};
;