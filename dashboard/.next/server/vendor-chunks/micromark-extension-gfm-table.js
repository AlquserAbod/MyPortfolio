/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-gfm-table";
exports.ids = ["vendor-chunks/micromark-extension-gfm-table"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-gfm-table/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-table/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./syntax */ \"(ssr)/./node_modules/micromark-extension-gfm-table/syntax.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFibGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxvSEFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFibGUvaW5kZXguanM/MjgxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3ludGF4JylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-table/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-gfm-table/syntax.js":
/*!**************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-table/syntax.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.flow = {\n    null: {\n        tokenize: tokenizeTable,\n        resolve: resolveTable,\n        interruptible: true\n    }\n};\nvar createSpace = __webpack_require__(/*! micromark/dist/tokenize/factory-space */ \"(ssr)/./node_modules/micromark/dist/tokenize/factory-space.js\");\nvar setextUnderlineMini = {\n    tokenize: tokenizeSetextUnderlineMini,\n    partial: true\n};\nvar nextPrefixedOrBlank = {\n    tokenize: tokenizeNextPrefixedOrBlank,\n    partial: true\n};\nfunction resolveTable(events, context) {\n    var length = events.length;\n    var index = -1;\n    var token;\n    var inHead;\n    var inDelimiterRow;\n    var inRow;\n    var cell;\n    var content;\n    var text;\n    var contentStart;\n    var contentEnd;\n    var cellStart;\n    while(++index < length){\n        token = events[index][1];\n        if (inRow) {\n            if (token.type === \"temporaryTableCellContent\") {\n                contentStart = contentStart || index;\n                contentEnd = index;\n            }\n            if (// Combine separate content parts into one.\n            (token.type === \"tableCellDivider\" || token.type === \"tableRow\") && contentEnd) {\n                content = {\n                    type: \"tableContent\",\n                    start: events[contentStart][1].start,\n                    end: events[contentEnd][1].end\n                };\n                text = {\n                    type: \"chunkText\",\n                    start: content.start,\n                    end: content.end,\n                    contentType: \"text\"\n                };\n                events.splice(contentStart, contentEnd - contentStart + 1, [\n                    \"enter\",\n                    content,\n                    context\n                ], [\n                    \"enter\",\n                    text,\n                    context\n                ], [\n                    \"exit\",\n                    text,\n                    context\n                ], [\n                    \"exit\",\n                    content,\n                    context\n                ]);\n                index -= contentEnd - contentStart - 3;\n                length = events.length;\n                contentStart = undefined;\n                contentEnd = undefined;\n            }\n        }\n        if (events[index][0] === \"exit\" && cellStart && cellStart + 1 < index && (token.type === \"tableCellDivider\" || token.type === \"tableRow\" && (cellStart + 3 < index || events[cellStart][1].type !== \"whitespace\"))) {\n            cell = {\n                type: inDelimiterRow ? \"tableDelimiter\" : inHead ? \"tableHeader\" : \"tableData\",\n                start: events[cellStart][1].start,\n                end: events[index][1].end\n            };\n            events.splice(index + (token.type === \"tableCellDivider\" ? 1 : 0), 0, [\n                \"exit\",\n                cell,\n                context\n            ]);\n            events.splice(cellStart, 0, [\n                \"enter\",\n                cell,\n                context\n            ]);\n            index += 2;\n            length = events.length;\n            cellStart = index + 1;\n        }\n        if (token.type === \"tableRow\") {\n            inRow = events[index][0] === \"enter\";\n            if (inRow) {\n                cellStart = index + 1;\n            }\n        }\n        if (token.type === \"tableDelimiterRow\") {\n            inDelimiterRow = events[index][0] === \"enter\";\n            if (inDelimiterRow) {\n                cellStart = index + 1;\n            }\n        }\n        if (token.type === \"tableHead\") {\n            inHead = events[index][0] === \"enter\";\n        }\n    }\n    return events;\n}\nfunction tokenizeTable(effects, ok, nok) {\n    var align = [];\n    var tableHeaderCount = 0;\n    var seenDelimiter;\n    var hasDash;\n    return start;\n    function start(code) {\n        /* istanbul ignore if - used to be passed in beta micromark versions. */ if (code === null || code === -5 || code === -4 || code === -3) {\n            return nok(code);\n        }\n        effects.enter(\"table\")._align = align;\n        effects.enter(\"tableHead\");\n        effects.enter(\"tableRow\");\n        // If we start with a pipe, we open a cell marker.\n        if (code === 124) {\n            return cellDividerHead(code);\n        }\n        tableHeaderCount++;\n        effects.enter(\"temporaryTableCellContent\");\n        // Can’t be space or eols at the start of a construct, so we’re in a cell.\n        return inCellContentHead(code);\n    }\n    function cellDividerHead(code) {\n        // Always a pipe.\n        effects.enter(\"tableCellDivider\");\n        effects.consume(code);\n        effects.exit(\"tableCellDivider\");\n        seenDelimiter = true;\n        return cellBreakHead;\n    }\n    function cellBreakHead(code) {\n        // EOF, CR, LF, CRLF.\n        if (code === null || code === -5 || code === -4 || code === -3) {\n            return atRowEndHead(code);\n        }\n        // HT, VS, SP.\n        if (code === -2 || code === -1 || code === 32) {\n            effects.enter(\"whitespace\");\n            effects.consume(code);\n            return inWhitespaceHead;\n        }\n        if (seenDelimiter) {\n            seenDelimiter = undefined;\n            tableHeaderCount++;\n        }\n        // `|`\n        if (code === 124) {\n            return cellDividerHead(code);\n        }\n        // Anything else is cell content.\n        effects.enter(\"temporaryTableCellContent\");\n        return inCellContentHead(code);\n    }\n    function inWhitespaceHead(code) {\n        // HT, VS, SP.\n        if (code === -2 || code === -1 || code === 32) {\n            effects.consume(code);\n            return inWhitespaceHead;\n        }\n        effects.exit(\"whitespace\");\n        return cellBreakHead(code);\n    }\n    function inCellContentHead(code) {\n        // EOF, whitespace, pipe\n        if (code === null || code < 0 || code === 32 || code === 124) {\n            effects.exit(\"temporaryTableCellContent\");\n            return cellBreakHead(code);\n        }\n        effects.consume(code);\n        // `\\`\n        return code === 92 ? inCellContentEscapeHead : inCellContentHead;\n    }\n    function inCellContentEscapeHead(code) {\n        // `\\` or `|`\n        if (code === 92 || code === 124) {\n            effects.consume(code);\n            return inCellContentHead;\n        }\n        // Anything else.\n        return inCellContentHead(code);\n    }\n    function atRowEndHead(code) {\n        if (code === null) {\n            return nok(code);\n        }\n        effects.exit(\"tableRow\");\n        effects.exit(\"tableHead\");\n        // Always a line ending.\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        // If a setext heading, exit.\n        return effects.check(setextUnderlineMini, nok, // Support an indent before the delimiter row.\n        createSpace(effects, rowStartDelimiter, \"linePrefix\", 4));\n    }\n    function rowStartDelimiter(code) {\n        // If there’s another space, or we’re at the EOL/EOF, exit.\n        if (code === null || code < 0 || code === 32) {\n            return nok(code);\n        }\n        effects.enter(\"tableDelimiterRow\");\n        return atDelimiterRowBreak(code);\n    }\n    function atDelimiterRowBreak(code) {\n        // EOF, CR, LF, CRLF.\n        if (code === null || code === -5 || code === -4 || code === -3) {\n            return rowEndDelimiter(code);\n        }\n        // HT, VS, SP.\n        if (code === -2 || code === -1 || code === 32) {\n            effects.enter(\"whitespace\");\n            effects.consume(code);\n            return inWhitespaceDelimiter;\n        }\n        // `-`\n        if (code === 45) {\n            effects.enter(\"tableDelimiterFiller\");\n            effects.consume(code);\n            hasDash = true;\n            align.push(null);\n            return inFillerDelimiter;\n        }\n        // `:`\n        if (code === 58) {\n            effects.enter(\"tableDelimiterAlignment\");\n            effects.consume(code);\n            effects.exit(\"tableDelimiterAlignment\");\n            align.push(\"left\");\n            return afterLeftAlignment;\n        }\n        // If we start with a pipe, we open a cell marker.\n        if (code === 124) {\n            effects.enter(\"tableCellDivider\");\n            effects.consume(code);\n            effects.exit(\"tableCellDivider\");\n            return atDelimiterRowBreak;\n        }\n        return nok(code);\n    }\n    function inWhitespaceDelimiter(code) {\n        // HT, VS, SP.\n        if (code === -2 || code === -1 || code === 32) {\n            effects.consume(code);\n            return inWhitespaceDelimiter;\n        }\n        effects.exit(\"whitespace\");\n        return atDelimiterRowBreak(code);\n    }\n    function inFillerDelimiter(code) {\n        // `-`\n        if (code === 45) {\n            effects.consume(code);\n            return inFillerDelimiter;\n        }\n        effects.exit(\"tableDelimiterFiller\");\n        // `:`\n        if (code === 58) {\n            effects.enter(\"tableDelimiterAlignment\");\n            effects.consume(code);\n            effects.exit(\"tableDelimiterAlignment\");\n            align[align.length - 1] = align[align.length - 1] === \"left\" ? \"center\" : \"right\";\n            return afterRightAlignment;\n        }\n        return atDelimiterRowBreak(code);\n    }\n    function afterLeftAlignment(code) {\n        // `-`\n        if (code === 45) {\n            effects.enter(\"tableDelimiterFiller\");\n            effects.consume(code);\n            hasDash = true;\n            return inFillerDelimiter;\n        }\n        // Anything else is not ok.\n        return nok(code);\n    }\n    function afterRightAlignment(code) {\n        // EOF, CR, LF, CRLF.\n        if (code === null || code === -5 || code === -4 || code === -3) {\n            return rowEndDelimiter(code);\n        }\n        // HT, VS, SP.\n        if (code === -2 || code === -1 || code === 32) {\n            effects.enter(\"whitespace\");\n            effects.consume(code);\n            return inWhitespaceDelimiter;\n        }\n        // `|`\n        if (code === 124) {\n            effects.enter(\"tableCellDivider\");\n            effects.consume(code);\n            effects.exit(\"tableCellDivider\");\n            return atDelimiterRowBreak;\n        }\n        return nok(code);\n    }\n    function rowEndDelimiter(code) {\n        effects.exit(\"tableDelimiterRow\");\n        // Exit if there was no dash at all, or if the header cell count is not the\n        // delimiter cell count.\n        if (!hasDash || tableHeaderCount !== align.length) {\n            return nok(code);\n        }\n        if (code === null) {\n            return tableClose(code);\n        }\n        return effects.check(nextPrefixedOrBlank, tableClose, tableContinue)(code);\n    }\n    function tableClose(code) {\n        effects.exit(\"table\");\n        return ok(code);\n    }\n    function tableContinue(code) {\n        // Always a line ending.\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        // We checked that it’s not a prefixed or blank line, so we’re certain a\n        // body is coming, though it may be indented.\n        return createSpace(effects, bodyStart, \"linePrefix\", 4);\n    }\n    function bodyStart(code) {\n        effects.enter(\"tableBody\");\n        return rowStartBody(code);\n    }\n    function rowStartBody(code) {\n        effects.enter(\"tableRow\");\n        // If we start with a pipe, we open a cell marker.\n        if (code === 124) {\n            return cellDividerBody(code);\n        }\n        effects.enter(\"temporaryTableCellContent\");\n        // Can’t be space or eols at the start of a construct, so we’re in a cell.\n        return inCellContentBody(code);\n    }\n    function cellDividerBody(code) {\n        // Always a pipe.\n        effects.enter(\"tableCellDivider\");\n        effects.consume(code);\n        effects.exit(\"tableCellDivider\");\n        return cellBreakBody;\n    }\n    function cellBreakBody(code) {\n        // EOF, CR, LF, CRLF.\n        if (code === null || code === -5 || code === -4 || code === -3) {\n            return atRowEndBody(code);\n        }\n        // HT, VS, SP.\n        if (code === -2 || code === -1 || code === 32) {\n            effects.enter(\"whitespace\");\n            effects.consume(code);\n            return inWhitespaceBody;\n        }\n        // `|`\n        if (code === 124) {\n            return cellDividerBody(code);\n        }\n        // Anything else is cell content.\n        effects.enter(\"temporaryTableCellContent\");\n        return inCellContentBody(code);\n    }\n    function inWhitespaceBody(code) {\n        // HT, VS, SP.\n        if (code === -2 || code === -1 || code === 32) {\n            effects.consume(code);\n            return inWhitespaceBody;\n        }\n        effects.exit(\"whitespace\");\n        return cellBreakBody(code);\n    }\n    function inCellContentBody(code) {\n        // EOF, whitespace, pipe\n        if (code === null || code < 0 || code === 32 || code === 124) {\n            effects.exit(\"temporaryTableCellContent\");\n            return cellBreakBody(code);\n        }\n        effects.consume(code);\n        // `\\`\n        return code === 92 ? inCellContentEscapeBody : inCellContentBody;\n    }\n    function inCellContentEscapeBody(code) {\n        // `\\` or `|`\n        if (code === 92 || code === 124) {\n            effects.consume(code);\n            return inCellContentBody;\n        }\n        // Anything else.\n        return inCellContentBody(code);\n    }\n    function atRowEndBody(code) {\n        effects.exit(\"tableRow\");\n        if (code === null) {\n            return tableBodyClose(code);\n        }\n        return effects.check(nextPrefixedOrBlank, tableBodyClose, tableBodyContinue)(code);\n    }\n    function tableBodyClose(code) {\n        effects.exit(\"tableBody\");\n        return tableClose(code);\n    }\n    function tableBodyContinue(code) {\n        // Always a line ending.\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        // Support an optional prefix, then start a body row.\n        return createSpace(effects, rowStartBody, \"linePrefix\", 4);\n    }\n}\n// Based on micromark, but that won’t work as we’re in a table, and that expects\n// content.\n// <https://github.com/micromark/micromark/blob/main/lib/tokenize/setext-underline.js>\nfunction tokenizeSetextUnderlineMini(effects, ok, nok) {\n    return start;\n    function start(code) {\n        // `-`\n        if (code !== 45) {\n            return nok(code);\n        }\n        effects.enter(\"setextUnderline\");\n        return sequence(code);\n    }\n    function sequence(code) {\n        if (code === 45) {\n            effects.consume(code);\n            return sequence;\n        }\n        return whitespace(code);\n    }\n    function whitespace(code) {\n        if (code === -2 || code === -1 || code === 32) {\n            effects.consume(code);\n            return whitespace;\n        }\n        if (code === null || code === -5 || code === -4 || code === -3) {\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n    var size = 0;\n    return start;\n    function start(code) {\n        // This is a check, so we don’t care about tokens, but we open a bogus one\n        // so we’re valid.\n        effects.enter(\"check\");\n        // EOL.\n        effects.consume(code);\n        return whitespace;\n    }\n    function whitespace(code) {\n        // VS or SP.\n        if (code === -1 || code === 32) {\n            effects.consume(code);\n            size++;\n            return size === 4 ? ok : whitespace;\n        }\n        // EOF or whitespace\n        if (code === null || code < 0) {\n            return ok(code);\n        }\n        // Anything else.\n        return nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-table/syntax.js\n");

/***/ })

};
;