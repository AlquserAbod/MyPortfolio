"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-markdown";
exports.ids = ["vendor-chunks/react-markdown"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/** @license React v17.0.2\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n        // nor polyfill, then a plain number is used for performance.\n        var REACT_ELEMENT_TYPE = 0xeac7;\n        var REACT_PORTAL_TYPE = 0xeaca;\n        var REACT_FRAGMENT_TYPE = 0xeacb;\n        var REACT_STRICT_MODE_TYPE = 0xeacc;\n        var REACT_PROFILER_TYPE = 0xead2;\n        var REACT_PROVIDER_TYPE = 0xeacd;\n        var REACT_CONTEXT_TYPE = 0xeace;\n        var REACT_FORWARD_REF_TYPE = 0xead0;\n        var REACT_SUSPENSE_TYPE = 0xead1;\n        var REACT_SUSPENSE_LIST_TYPE = 0xead8;\n        var REACT_MEMO_TYPE = 0xead3;\n        var REACT_LAZY_TYPE = 0xead4;\n        var REACT_BLOCK_TYPE = 0xead9;\n        var REACT_SERVER_BLOCK_TYPE = 0xeada;\n        var REACT_FUNDAMENTAL_TYPE = 0xead5;\n        var REACT_SCOPE_TYPE = 0xead7;\n        var REACT_OPAQUE_ID_TYPE = 0xeae0;\n        var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\n        var REACT_OFFSCREEN_TYPE = 0xeae2;\n        var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n        if (typeof Symbol === \"function\" && Symbol.for) {\n            var symbolFor = Symbol.for;\n            REACT_ELEMENT_TYPE = symbolFor(\"react.element\");\n            REACT_PORTAL_TYPE = symbolFor(\"react.portal\");\n            REACT_FRAGMENT_TYPE = symbolFor(\"react.fragment\");\n            REACT_STRICT_MODE_TYPE = symbolFor(\"react.strict_mode\");\n            REACT_PROFILER_TYPE = symbolFor(\"react.profiler\");\n            REACT_PROVIDER_TYPE = symbolFor(\"react.provider\");\n            REACT_CONTEXT_TYPE = symbolFor(\"react.context\");\n            REACT_FORWARD_REF_TYPE = symbolFor(\"react.forward_ref\");\n            REACT_SUSPENSE_TYPE = symbolFor(\"react.suspense\");\n            REACT_SUSPENSE_LIST_TYPE = symbolFor(\"react.suspense_list\");\n            REACT_MEMO_TYPE = symbolFor(\"react.memo\");\n            REACT_LAZY_TYPE = symbolFor(\"react.lazy\");\n            REACT_BLOCK_TYPE = symbolFor(\"react.block\");\n            REACT_SERVER_BLOCK_TYPE = symbolFor(\"react.server.block\");\n            REACT_FUNDAMENTAL_TYPE = symbolFor(\"react.fundamental\");\n            REACT_SCOPE_TYPE = symbolFor(\"react.scope\");\n            REACT_OPAQUE_ID_TYPE = symbolFor(\"react.opaque.id\");\n            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor(\"react.debug_trace_mode\");\n            REACT_OFFSCREEN_TYPE = symbolFor(\"react.offscreen\");\n            REACT_LEGACY_HIDDEN_TYPE = symbolFor(\"react.legacy_hidden\");\n        }\n        // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function typeOf(object) {\n            if (typeof object === \"object\" && object !== null) {\n                var $$typeof = object.$$typeof;\n                switch($$typeof){\n                    case REACT_ELEMENT_TYPE:\n                        var type = object.type;\n                        switch(type){\n                            case REACT_FRAGMENT_TYPE:\n                            case REACT_PROFILER_TYPE:\n                            case REACT_STRICT_MODE_TYPE:\n                            case REACT_SUSPENSE_TYPE:\n                            case REACT_SUSPENSE_LIST_TYPE:\n                                return type;\n                            default:\n                                var $$typeofType = type && type.$$typeof;\n                                switch($$typeofType){\n                                    case REACT_CONTEXT_TYPE:\n                                    case REACT_FORWARD_REF_TYPE:\n                                    case REACT_LAZY_TYPE:\n                                    case REACT_MEMO_TYPE:\n                                    case REACT_PROVIDER_TYPE:\n                                        return $$typeofType;\n                                    default:\n                                        return $$typeof;\n                                }\n                        }\n                    case REACT_PORTAL_TYPE:\n                        return $$typeof;\n                }\n            }\n            return undefined;\n        }\n        var ContextConsumer = REACT_CONTEXT_TYPE;\n        var ContextProvider = REACT_PROVIDER_TYPE;\n        var Element = REACT_ELEMENT_TYPE;\n        var ForwardRef = REACT_FORWARD_REF_TYPE;\n        var Fragment = REACT_FRAGMENT_TYPE;\n        var Lazy = REACT_LAZY_TYPE;\n        var Memo = REACT_MEMO_TYPE;\n        var Portal = REACT_PORTAL_TYPE;\n        var Profiler = REACT_PROFILER_TYPE;\n        var StrictMode = REACT_STRICT_MODE_TYPE;\n        var Suspense = REACT_SUSPENSE_TYPE;\n        var hasWarnedAboutDeprecatedIsAsyncMode = false;\n        var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated\n        function isAsyncMode(object) {\n            {\n                if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n                    hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n                    console[\"warn\"](\"The ReactIs.isAsyncMode() alias has been deprecated, \" + \"and will be removed in React 18+.\");\n                }\n            }\n            return false;\n        }\n        function isConcurrentMode(object) {\n            {\n                if (!hasWarnedAboutDeprecatedIsConcurrentMode) {\n                    hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint\n                    console[\"warn\"](\"The ReactIs.isConcurrentMode() alias has been deprecated, \" + \"and will be removed in React 18+.\");\n                }\n            }\n            return false;\n        }\n        function isContextConsumer(object) {\n            return typeOf(object) === REACT_CONTEXT_TYPE;\n        }\n        function isContextProvider(object) {\n            return typeOf(object) === REACT_PROVIDER_TYPE;\n        }\n        function isElement(object) {\n            return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n        function isForwardRef(object) {\n            return typeOf(object) === REACT_FORWARD_REF_TYPE;\n        }\n        function isFragment(object) {\n            return typeOf(object) === REACT_FRAGMENT_TYPE;\n        }\n        function isLazy(object) {\n            return typeOf(object) === REACT_LAZY_TYPE;\n        }\n        function isMemo(object) {\n            return typeOf(object) === REACT_MEMO_TYPE;\n        }\n        function isPortal(object) {\n            return typeOf(object) === REACT_PORTAL_TYPE;\n        }\n        function isProfiler(object) {\n            return typeOf(object) === REACT_PROFILER_TYPE;\n        }\n        function isStrictMode(object) {\n            return typeOf(object) === REACT_STRICT_MODE_TYPE;\n        }\n        function isSuspense(object) {\n            return typeOf(object) === REACT_SUSPENSE_TYPE;\n        }\n        exports.ContextConsumer = ContextConsumer;\n        exports.ContextProvider = ContextProvider;\n        exports.Element = Element;\n        exports.ForwardRef = ForwardRef;\n        exports.Fragment = Fragment;\n        exports.Lazy = Lazy;\n        exports.Memo = Memo;\n        exports.Portal = Portal;\n        exports.Profiler = Profiler;\n        exports.StrictMode = StrictMode;\n        exports.Suspense = Suspense;\n        exports.isAsyncMode = isAsyncMode;\n        exports.isConcurrentMode = isConcurrentMode;\n        exports.isContextConsumer = isContextConsumer;\n        exports.isContextProvider = isContextProvider;\n        exports.isElement = isElement;\n        exports.isForwardRef = isForwardRef;\n        exports.isFragment = isFragment;\n        exports.isLazy = isLazy;\n        exports.isMemo = isMemo;\n        exports.isPortal = isPortal;\n        exports.isProfiler = isProfiler;\n        exports.isStrictMode = isStrictMode;\n        exports.isSuspense = isSuspense;\n        exports.isValidElementType = isValidElementType;\n        exports.typeOf = typeOf;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztDQU9DLEdBRUQ7QUFFQSxJQUFJQSxJQUFxQyxFQUFFO0lBQ3hDO1FBQ0g7UUFFQSxZQUFZO1FBQ1osd0NBQXdDO1FBQ3hDLGtGQUFrRjtRQUNsRixtRkFBbUY7UUFDbkYsNkRBQTZEO1FBQzdELElBQUlDLHFCQUFxQjtRQUN6QixJQUFJQyxvQkFBb0I7UUFDeEIsSUFBSUMsc0JBQXNCO1FBQzFCLElBQUlDLHlCQUF5QjtRQUM3QixJQUFJQyxzQkFBc0I7UUFDMUIsSUFBSUMsc0JBQXNCO1FBQzFCLElBQUlDLHFCQUFxQjtRQUN6QixJQUFJQyx5QkFBeUI7UUFDN0IsSUFBSUMsc0JBQXNCO1FBQzFCLElBQUlDLDJCQUEyQjtRQUMvQixJQUFJQyxrQkFBa0I7UUFDdEIsSUFBSUMsa0JBQWtCO1FBQ3RCLElBQUlDLG1CQUFtQjtRQUN2QixJQUFJQywwQkFBMEI7UUFDOUIsSUFBSUMseUJBQXlCO1FBQzdCLElBQUlDLG1CQUFtQjtRQUN2QixJQUFJQyx1QkFBdUI7UUFDM0IsSUFBSUMsZ0NBQWdDO1FBQ3BDLElBQUlDLHVCQUF1QjtRQUMzQixJQUFJQywyQkFBMkI7UUFFL0IsSUFBSSxPQUFPQyxXQUFXLGNBQWNBLE9BQU9DLEdBQUcsRUFBRTtZQUM5QyxJQUFJQyxZQUFZRixPQUFPQyxHQUFHO1lBQzFCckIscUJBQXFCc0IsVUFBVTtZQUMvQnJCLG9CQUFvQnFCLFVBQVU7WUFDOUJwQixzQkFBc0JvQixVQUFVO1lBQ2hDbkIseUJBQXlCbUIsVUFBVTtZQUNuQ2xCLHNCQUFzQmtCLFVBQVU7WUFDaENqQixzQkFBc0JpQixVQUFVO1lBQ2hDaEIscUJBQXFCZ0IsVUFBVTtZQUMvQmYseUJBQXlCZSxVQUFVO1lBQ25DZCxzQkFBc0JjLFVBQVU7WUFDaENiLDJCQUEyQmEsVUFB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QUMzQlkseUJBQXlCLEdBQUdYO1FBQzVCVyx5QkFBeUIsR0FBR1Y7UUFDNUJVLGlCQUFpQixHQUFHVDtRQUNwQlMsb0JBQW9CLEdBQUdSO1FBQ3ZCUSxrQkFBa0IsR0FBR1A7UUFDckJPLGNBQWMsR0FBR047UUFDakJNLGNBQWMsR0FBR0w7UUFDakJLLGdCQUFnQixHQUFHSjtRQUNuQkksa0JBQWtCLEdBQUdIO1FBQ3JCRyxvQkFBb0IsR0FBR0Y7UUFDdkJFLGtCQUFrQixHQUFHRDtRQUNyQkMsMEJBQTBCLEdBQUdsQztRQUM3QmtDLGNBQWMsR0FBRy9CO0lBQ2Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzP2JkN2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWlzLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gQVRURU5USU9OXG4vLyBXaGVuIGFkZGluZyBuZXcgc3ltYm9scyB0byB0aGlzIGZpbGUsXG4vLyBQbGVhc2UgY29uc2lkZXIgYWxzbyBhZGRpbmcgdG8gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9SZWFjdFN5bWJvbHMnXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IDB4ZWFjNztcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IDB4ZWFjYTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gMHhlYWNiO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSAweGVhY2M7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IDB4ZWFkMjtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gMHhlYWNkO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IDB4ZWFjZTtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gMHhlYWQwO1xudmFyIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSAweGVhZDE7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gMHhlYWQ4O1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IDB4ZWFkMztcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSAweGVhZDQ7XG52YXIgUkVBQ1RfQkxPQ0tfVFlQRSA9IDB4ZWFkOTtcbnZhciBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSA9IDB4ZWFkYTtcbnZhciBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gMHhlYWQ1O1xudmFyIFJFQUNUX1NDT1BFX1RZUEUgPSAweGVhZDc7XG52YXIgUkVBQ1RfT1BBUVVFX0lEX1RZUEUgPSAweGVhZTA7XG52YXIgUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUgPSAweGVhZTE7XG52YXIgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSAweGVhZTI7XG52YXIgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFID0gMHhlYWUzO1xuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yKSB7XG4gIHZhciBzeW1ib2xGb3IgPSBTeW1ib2wuZm9yO1xuICBSRUFDVF9FTEVNRU5UX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmVsZW1lbnQnKTtcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnBvcnRhbCcpO1xuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5mcmFnbWVudCcpO1xuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpO1xuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wcm9maWxlcicpO1xuICBSRUFDVF9QUk9WSURFUl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wcm92aWRlcicpO1xuICBSRUFDVF9DT05URVhUX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmNvbnRleHQnKTtcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuZm9yd2FyZF9yZWYnKTtcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IHN5bWJvbEZvcigncmVhY3Quc3VzcGVuc2UnKTtcbiAgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0Jyk7XG4gIFJFQUNUX01FTU9fVFlQRSA9IHN5bWJvbEZvcigncmVhY3QubWVtbycpO1xuICBSRUFDVF9MQVpZX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmxhenknKTtcbiAgUkVBQ1RfQkxPQ0tfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuYmxvY2snKTtcbiAgUkVBQ1RfU0VSVkVSX0JMT0NLX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnNlcnZlci5ibG9jaycpO1xuICBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5mdW5kYW1lbnRhbCcpO1xuICBSRUFDVF9TQ09QRV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zY29wZScpO1xuICBSRUFDVF9PUEFRVUVfSURfVFlQRSA9IHN5bWJvbEZvcigncmVhY3Qub3BhcXVlLmlkJyk7XG4gIFJFQUNUX0RFQlVHX1RSQUNJTkdfTU9ERV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5kZWJ1Z190cmFjZV9tb2RlJyk7XG4gIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5vZmZzY3JlZW4nKTtcbiAgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5sZWdhY3lfaGlkZGVuJyk7XG59XG5cbi8vIEZpbHRlciBjZXJ0YWluIERPTSBhdHRyaWJ1dGVzIChlLmcuIHNyYywgaHJlZikgaWYgdGhlaXIgdmFsdWVzIGFyZSBlbXB0eSBzdHJpbmdzLlxuXG52YXIgZW5hYmxlU2NvcGVBUEkgPSBmYWxzZTsgLy8gRXhwZXJpbWVudGFsIENyZWF0ZSBFdmVudCBIYW5kbGUgQVBJLlxuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkge1xuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gTm90ZTogdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgKGUuZy4gaWYgaXQncyBhIHBvbHlmaWxsKS5cblxuXG4gIGlmICh0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9MRUdBQ1lfSElEREVOX1RZUEUgfHwgZW5hYmxlU2NvcGVBUEkgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICBpZiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQkxPQ0tfVFlQRSB8fCB0eXBlWzBdID09PSBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB0eXBlT2Yob2JqZWN0KSB7XG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwpIHtcbiAgICB2YXIgJCR0eXBlb2YgPSBvYmplY3QuJCR0eXBlb2Y7XG5cbiAgICBzd2l0Y2ggKCQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgdmFyIHR5cGUgPSBvYmplY3QudHlwZTtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgJCR0eXBlb2ZUeXBlID0gdHlwZSAmJiB0eXBlLiQkdHlwZW9mO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2ZUeXBlO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG52YXIgQ29udGV4dENvbnN1bWVyID0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xudmFyIENvbnRleHRQcm92aWRlciA9IFJFQUNUX1BST1ZJREVSX1RZUEU7XG52YXIgRWxlbWVudCA9IFJFQUNUX0VMRU1FTlRfVFlQRTtcbnZhciBGb3J3YXJkUmVmID0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTtcbnZhciBGcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG52YXIgTGF6eSA9IFJFQUNUX0xBWllfVFlQRTtcbnZhciBNZW1vID0gUkVBQ1RfTUVNT19UWVBFO1xudmFyIFBvcnRhbCA9IFJFQUNUX1BPUlRBTF9UWVBFO1xudmFyIFByb2ZpbGVyID0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbnZhciBTdHJpY3RNb2RlID0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbnZhciBTdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG52YXIgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSBmYWxzZTtcbnZhciBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0NvbmN1cnJlbnRNb2RlID0gZmFsc2U7IC8vIEFzeW5jTW9kZSBzaG91bGQgYmUgZGVwcmVjYXRlZFxuXG5mdW5jdGlvbiBpc0FzeW5jTW9kZShvYmplY3QpIHtcbiAge1xuICAgIGlmICghaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUpIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gdHJ1ZTsgLy8gVXNpbmcgY29uc29sZVsnd2FybiddIHRvIGV2YWRlIEJhYmVsIGFuZCBFU0xpbnRcblxuICAgICAgY29uc29sZVsnd2FybiddKCdUaGUgUmVhY3RJcy5pc0FzeW5jTW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxOCsuJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNDb25jdXJyZW50TW9kZShvYmplY3QpIHtcbiAge1xuICAgIGlmICghaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNDb25jdXJyZW50TW9kZSkge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNDb25jdXJyZW50TW9kZSA9IHRydWU7IC8vIFVzaW5nIGNvbnNvbGVbJ3dhcm4nXSB0byBldmFkZSBCYWJlbCBhbmQgRVNMaW50XG5cbiAgICAgIGNvbnNvbGVbJ3dhcm4nXSgnVGhlIFJlYWN0SXMuaXNDb25jdXJyZW50TW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxOCsuJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRm9yd2FyZFJlZihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xufVxuZnVuY3Rpb24gaXNGcmFnbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNMYXp5KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0xBWllfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzTWVtbyhvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9NRU1PX1RZUEU7XG59XG5mdW5jdGlvbiBpc1BvcnRhbChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUHJvZmlsZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3RyaWN0TW9kZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdXNwZW5zZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xufVxuXG5leHBvcnRzLkNvbnRleHRDb25zdW1lciA9IENvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuQ29udGV4dFByb3ZpZGVyID0gQ29udGV4dFByb3ZpZGVyO1xuZXhwb3J0cy5FbGVtZW50ID0gRWxlbWVudDtcbmV4cG9ydHMuRm9yd2FyZFJlZiA9IEZvcndhcmRSZWY7XG5leHBvcnRzLkZyYWdtZW50ID0gRnJhZ21lbnQ7XG5leHBvcnRzLkxhenkgPSBMYXp5O1xuZXhwb3J0cy5NZW1vID0gTWVtbztcbmV4cG9ydHMuUG9ydGFsID0gUG9ydGFsO1xuZXhwb3J0cy5Qcm9maWxlciA9IFByb2ZpbGVyO1xuZXhwb3J0cy5TdHJpY3RNb2RlID0gU3RyaWN0TW9kZTtcbmV4cG9ydHMuU3VzcGVuc2UgPSBTdXNwZW5zZTtcbmV4cG9ydHMuaXNBc3luY01vZGUgPSBpc0FzeW5jTW9kZTtcbmV4cG9ydHMuaXNDb25jdXJyZW50TW9kZSA9IGlzQ29uY3VycmVudE1vZGU7XG5leHBvcnRzLmlzQ29udGV4dENvbnN1bWVyID0gaXNDb250ZXh0Q29uc3VtZXI7XG5leHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyID0gaXNDb250ZXh0UHJvdmlkZXI7XG5leHBvcnRzLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbmV4cG9ydHMuaXNGb3J3YXJkUmVmID0gaXNGb3J3YXJkUmVmO1xuZXhwb3J0cy5pc0ZyYWdtZW50ID0gaXNGcmFnbWVudDtcbmV4cG9ydHMuaXNMYXp5ID0gaXNMYXp5O1xuZXhwb3J0cy5pc01lbW8gPSBpc01lbW87XG5leHBvcnRzLmlzUG9ydGFsID0gaXNQb3J0YWw7XG5leHBvcnRzLmlzUHJvZmlsZXIgPSBpc1Byb2ZpbGVyO1xuZXhwb3J0cy5pc1N0cmljdE1vZGUgPSBpc1N0cmljdE1vZGU7XG5leHBvcnRzLmlzU3VzcGVuc2UgPSBpc1N1c3BlbnNlO1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGUgPSBpc1ZhbGlkRWxlbWVudFR5cGU7XG5leHBvcnRzLnR5cGVPZiA9IHR5cGVPZjtcbiAgfSkoKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfUE9SVEFMX1RZUEUiLCJSRUFDVF9GUkFHTUVOVF9UWVBFIiwiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsIlJFQUNUX1BST0ZJTEVSX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfQ09OVEVYVF9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJSRUFDVF9CTE9DS19UWVBFIiwiUkVBQ1RfU0VSVkVSX0JMT0NLX1RZUEUiLCJSRUFDVF9GVU5EQU1FTlRBTF9UWVBFIiwiUkVBQ1RfU0NPUEVfVFlQRSIsIlJFQUNUX09QQVFVRV9JRF9UWVBFIiwiUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUiLCJSRUFDVF9PRkZTQ1JFRU5fVFlQRSIsIlJFQUNUX0xFR0FDWV9ISURERU5fVFlQRSIsIlN5bWJvbCIsImZvciIsInN5bWJvbEZvciIsImVuYWJsZVNjb3BlQVBJIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZSIsIiQkdHlwZW9mIiwidHlwZU9mIiwib2JqZWN0IiwiJCR0eXBlb2ZUeXBlIiwidW5kZWZpbmVkIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZvcndhcmRSZWYiLCJGcmFnbWVudCIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSIsImhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQ29uY3VycmVudE1vZGUiLCJpc0FzeW5jTW9kZSIsImNvbnNvbGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-markdown/node_modules/react-is/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-markdown/node_modules/react-is/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"(ssr)/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLGtLQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/ZTFiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-markdown/node_modules/react-is/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-markdown/src/ast-to-react.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-markdown/src/ast-to-react.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst ReactIs = __webpack_require__(/*! react-is */ \"(ssr)/./node_modules/react-markdown/node_modules/react-is/index.js\");\nconst svg = __webpack_require__(/*! property-information/svg */ \"(ssr)/./node_modules/property-information/svg.js\");\nconst find = __webpack_require__(/*! property-information/find */ \"(ssr)/./node_modules/property-information/find.js\");\nconst hastToReact = __webpack_require__(/*! property-information/hast-to-react.json */ \"(ssr)/./node_modules/property-information/hast-to-react.json\");\nconst spaces = __webpack_require__(/*! space-separated-tokens */ \"(ssr)/./node_modules/space-separated-tokens/index.js\");\nconst commas = __webpack_require__(/*! comma-separated-tokens */ \"(ssr)/./node_modules/comma-separated-tokens/index.js\");\nconst style = __webpack_require__(/*! style-to-object */ \"(ssr)/./node_modules/style-to-object/index.js\");\nexports.hastToReact = toReact;\nexports.hastChildrenToReact = childrenToReact;\n/**\n * @typedef {JSX.IntrinsicElements} IntrinsicElements\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n */ /**\n * @typedef Info\n * @property {string?} space\n * @property {string?} attribute\n * @property {string?} property\n * @property {boolean} boolean\n * @property {boolean} booleanish\n * @property {boolean} overloadedBoolean\n * @property {boolean} number\n * @property {boolean} commaSeparated\n * @property {boolean} spaceSeparated\n * @property {boolean} commaOrSpaceSeparated\n * @property {boolean} mustUseProperty\n * @property {boolean} defined\n *\n * @typedef Schema\n * @property {Object.<string, Info>} property\n * @property {Object.<string, string>} normal\n * @property {string?} space\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {TransformOptions} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array.<Comment|Element|Text>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array.<Comment|Element|Text>} children\n * @param {string?} title\n * @returns {string|undefined}\n *\n * @typedef {keyof IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef ReactMarkdownProps\n * @property {Element} node\n * @property {string} key\n * @property {ReactNode[]} children\n * @property {Position?} [sourcePosition] Passed when `options.rawSourcePos` is given\n * @property {number} [index] Passed when `options.includeElementIndex` is given\n * @property {number} [siblingCount] Passed when `options.includeElementIndex` is given\n *\n * @callback CodeComponent\n * @param {JSX.IntrinsicElements['code'] & ReactMarkdownProps & {inline?: boolean}} props\n * @returns {ReactNode}\n *\n * @callback HeadingComponent\n * @param {JSX.IntrinsicElements['h1'] & ReactMarkdownProps & {level: number}} props\n * @returns {ReactNode}\n *\n * @callback LiComponent\n * @param {JSX.IntrinsicElements['li'] & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} props\n * @returns {ReactNode}\n *\n * @callback OrderedListComponent\n * @param {JSX.IntrinsicElements['ol'] & ReactMarkdownProps & {depth: number, ordered: true}} props\n * @returns {ReactNode}\n *\n * @callback TableCellComponent\n * @param {JSX.IntrinsicElements['table'] & ReactMarkdownProps & {style?: Object.<string, unknown>, isHeader: boolean}} props\n * @returns {ReactNode}\n *\n * @callback TableRowComponent\n * @param {JSX.IntrinsicElements['tr'] & ReactMarkdownProps & {isHeader: boolean}} props\n * @returns {ReactNode}\n *\n * @callback UnorderedListComponent\n * @param {JSX.IntrinsicElements['ul'] & ReactMarkdownProps & {depth: number, ordered: false}} props\n * @returns {ReactNode}\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableCellComponent|ReactMarkdownNames} td\n * @property {TableCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {{[TagName in keyof IntrinsicElements]: TagName | ((props: IntrinsicElements[TagName] & ReactMarkdownProps) => ReactNode)}} NormalComponents\n * @typedef {Partial<Omit<NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n */ /**\n * @typedef TransformOptions\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {string|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */ const own = {}.hasOwnProperty;\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set([\n    \"table\",\n    \"thead\",\n    \"tbody\",\n    \"tfoot\",\n    \"tr\"\n]);\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */ function childrenToReact(context, node) {\n    /** @type {Array.<ReactNode>} */ const children = [];\n    let childIndex = -1;\n    /** @type {Comment|Doctype|Element|Raw|Text} */ let child;\n    while(++childIndex < node.children.length){\n        child = node.children[childIndex];\n        if (child.type === \"element\") {\n            children.push(toReact(context, child, childIndex, node));\n        } else if (child.type === \"text\") {\n            // React does not permit whitespace text elements as children of table:\n            // cf. https://github.com/remarkjs/react-markdown/issues/576\n            if (node.type !== \"element\" || !tableElements.has(node.tagName) || child.value !== \"\\n\") {\n                children.push(child.value);\n            }\n        } else if (child.type === \"raw\" && !context.options.skipHtml) {\n            // Default behavior is to show (encoded) HTML.\n            // @ts-expect-error `raw` nodes are non-standard\n            children.push(child.value);\n        }\n    }\n    return children;\n}\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */ function toReact(context, node, index, parent) {\n    const options = context.options;\n    const parentSchema = context.schema;\n    /** @type {ReactMarkdownNames} */ // @ts-expect-error assume a known HTML/SVG element.\n    const name = node.tagName;\n    /** @type {Object.<string, unknown>} */ const properties = {};\n    let schema = parentSchema;\n    /** @type {string} */ let property;\n    if (parentSchema.space === \"html\" && name === \"svg\") {\n        schema = svg;\n        context.schema = schema;\n    }\n    /* istanbul ignore else - types say they’re optional. */ if (node.properties) {\n        for(property in node.properties){\n            /* istanbul ignore else - prototype polution. */ if (own.call(node.properties, property)) {\n                addProperty(properties, property, node.properties[property], context);\n            }\n        }\n    }\n    if (name === \"ol\" || name === \"ul\") {\n        context.listDepth++;\n    }\n    const children = childrenToReact(context, node);\n    if (name === \"ol\" || name === \"ul\") {\n        context.listDepth--;\n    }\n    // Restore parent schema.\n    context.schema = parentSchema;\n    // Nodes created by plugins do not have positional info, in which case we use\n    // an object that matches the positon interface.\n    const position = node.position || {\n        start: {\n            line: null,\n            column: null,\n            offset: null\n        },\n        end: {\n            line: null,\n            column: null,\n            offset: null\n        }\n    };\n    const component = options.components && own.call(options.components, name) ? options.components[name] : name;\n    const basic = typeof component === \"string\" || component === React.Fragment;\n    if (!ReactIs.isValidElementType(component)) {\n        throw new TypeError(`Component for name \\`${name}\\` not defined or is not renderable`);\n    }\n    properties.key = [\n        name,\n        position.start.line,\n        position.start.column,\n        index\n    ].join(\"-\");\n    if (name === \"a\" && options.linkTarget) {\n        properties.target = typeof options.linkTarget === \"function\" ? options.linkTarget(properties.href, node.children, properties.title) : options.linkTarget;\n    }\n    if (name === \"a\" && options.transformLinkUri) {\n        properties.href = options.transformLinkUri(// @ts-expect-error assume `href` is a string\n        properties.href, node.children, properties.title);\n    }\n    if (!basic && name === \"code\" && parent.type === \"element\" && parent.tagName !== \"pre\") {\n        properties.inline = true;\n    }\n    if (!basic && (name === \"h1\" || name === \"h2\" || name === \"h3\" || name === \"h4\" || name === \"h5\" || name === \"h6\")) {\n        properties.level = parseInt(name.charAt(1), 10);\n    }\n    if (name === \"img\" && options.transformImageUri) {\n        properties.src = options.transformImageUri(// @ts-expect-error assume `src` is a string\n        properties.src, properties.alt, properties.title);\n    }\n    if (!basic && name === \"li\" && parent.type === \"element\") {\n        const input = getInputElement(node);\n        properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;\n        properties.index = getElementsBeforeCount(parent, node);\n        properties.ordered = parent.tagName === \"ol\";\n    }\n    if (!basic && (name === \"ol\" || name === \"ul\")) {\n        properties.ordered = name === \"ol\";\n        properties.depth = context.listDepth;\n    }\n    if (name === \"td\" || name === \"th\") {\n        if (properties.align) {\n            if (!properties.style) properties.style = {};\n            // @ts-expect-error assume `style` is an object\n            properties.style.textAlign = properties.align;\n            delete properties.align;\n        }\n        if (!basic) {\n            properties.isHeader = name === \"th\";\n        }\n    }\n    if (!basic && name === \"tr\" && parent.type === \"element\") {\n        properties.isHeader = Boolean(parent.tagName === \"thead\");\n    }\n    // If `sourcePos` is given, pass source information (line/column info from markdown source).\n    if (options.sourcePos) {\n        properties[\"data-sourcepos\"] = flattenPosition(position);\n    }\n    if (!basic && options.rawSourcePos) {\n        properties.sourcePosition = node.position;\n    }\n    // If `includeElementIndex` is given, pass node index info to components.\n    if (!basic && options.includeElementIndex) {\n        properties.index = getElementsBeforeCount(parent, node);\n        properties.siblingCount = getElementsBeforeCount(parent);\n    }\n    if (!basic) {\n        properties.node = node;\n    }\n    // Ensure no React warnings are emitted for void elements w/ children.\n    return children.length > 0 ? React.createElement(component, properties, children) : React.createElement(component, properties);\n}\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */ function getInputElement(node) {\n    let index = -1;\n    while(++index < node.children.length){\n        const child = node.children[index];\n        if (child.type === \"element\" && child.tagName === \"input\") {\n            return child;\n        }\n    }\n    return null;\n}\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */ function getElementsBeforeCount(parent, node) {\n    let index = -1;\n    let count = 0;\n    while(++index < parent.children.length){\n        if (parent.children[index] === node) break;\n        if (parent.children[index].type === \"element\") count++;\n    }\n    return count;\n}\n/**\n * @param {Object.<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */ function addProperty(props, prop, value, ctx) {\n    /** @type {Info} */ const info = find(ctx.schema, prop);\n    let result = value;\n    // Ignore nullish and `NaN` values.\n    // eslint-disable-next-line no-self-compare\n    if (result === null || result === undefined || result !== result) {\n        return;\n    }\n    // Accept `array`.\n    // Most props are space-separated.\n    if (result && typeof result === \"object\" && \"length\" in result) {\n        // type-coverage:ignore-next-line remove when typed.\n        result = (info.commaSeparated ? commas : spaces).stringify(result);\n    }\n    if (info.property === \"style\" && typeof result === \"string\") {\n        result = parseStyle(result);\n    }\n    /* istanbul ignore else - types say they’re optional. */ if (info.space && info.property) {\n        props[own.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;\n    } else if (info.attribute) {\n        props[info.attribute] = result;\n    }\n}\n/**\n * @param {string} value\n * @returns {Object.<string, string>}\n */ function parseStyle(value) {\n    /** @type {Object.<string, string>} */ const result = {};\n    try {\n        style(value, iterator);\n    } catch (/** @type {unknown} */ _) {\n    // Silent.\n    }\n    return result;\n    /**\n   * @param {string} name\n   * @param {string} v\n   */ function iterator(name, v) {\n        const k = name.slice(0, 4) === \"-ms-\" ? `ms-${name.slice(4)}` : name;\n        result[k.replace(/-([a-z])/g, styleReplacer)] = v;\n    }\n}\n/**\n * @param {unknown} _\n * @param {string} $1\n */ function styleReplacer(_, $1) {\n    return $1.toUpperCase();\n}\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */ function flattenPosition(pos) {\n    return [\n        pos.start.line,\n        \":\",\n        pos.start.column,\n        \"-\",\n        pos.end.line,\n        \":\",\n        pos.end.column\n    ].map((d)=>String(d)).join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-markdown/src/ast-to-react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-markdown/src/react-markdown.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-markdown/src/react-markdown.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst vfile = __webpack_require__(/*! vfile */ \"(ssr)/./node_modules/vfile/index.js\");\nconst unified = __webpack_require__(/*! unified */ \"(ssr)/./node_modules/unified/index.js\");\nconst parse = __webpack_require__(/*! remark-parse */ \"(ssr)/./node_modules/remark-parse/index.js\");\nconst remarkRehype = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/remark-rehype/index.js\");\nconst PropTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nconst html = __webpack_require__(/*! property-information/html */ \"(ssr)/./node_modules/property-information/html.js\");\nconst filter = __webpack_require__(/*! ./rehype-filter.js */ \"(ssr)/./node_modules/react-markdown/src/rehype-filter.js\");\nconst uriTransformer = __webpack_require__(/*! ./uri-transformer.js */ \"(ssr)/./node_modules/react-markdown/src/uri-transformer.js\");\nconst childrenToReact = (__webpack_require__(/*! ./ast-to-react.js */ \"(ssr)/./node_modules/react-markdown/src/ast-to-react.js\").hastChildrenToReact);\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').RehypeFilterOptions} FilterOptions\n * @typedef {import('./ast-to-react.js').TransformOptions} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [plugins=[]] **deprecated**: use `remarkPlugins` instead\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n */ module.exports = ReactMarkdown;\nconst own = {}.hasOwnProperty;\nconst changelog = \"https://github.com/remarkjs/react-markdown/blob/main/changelog.md\";\n/**\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */ /**\n * @type {Object.<string, Deprecation>}\n */ const deprecated = {\n    renderers: {\n        to: \"components\",\n        id: \"change-renderers-to-components\"\n    },\n    astPlugins: {\n        id: \"remove-buggy-html-in-markdown-parser\"\n    },\n    allowDangerousHtml: {\n        id: \"remove-buggy-html-in-markdown-parser\"\n    },\n    escapeHtml: {\n        id: \"remove-buggy-html-in-markdown-parser\"\n    },\n    source: {\n        to: \"children\",\n        id: \"change-source-to-children\"\n    },\n    allowNode: {\n        to: \"allowElement\",\n        id: \"replace-allownode-allowedtypes-and-disallowedtypes\"\n    },\n    allowedTypes: {\n        to: \"allowedElements\",\n        id: \"replace-allownode-allowedtypes-and-disallowedtypes\"\n    },\n    disallowedTypes: {\n        to: \"disallowedElements\",\n        id: \"replace-allownode-allowedtypes-and-disallowedtypes\"\n    },\n    includeNodeIndex: {\n        to: \"includeElementIndex\",\n        id: \"change-includenodeindex-to-includeelementindex\"\n    }\n};\n/**\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */ function ReactMarkdown(options) {\n    for(const key in deprecated){\n        if (own.call(deprecated, key) && own.call(options, key)) {\n            /** @type {Deprecation} */ const deprecation = deprecated[key];\n            console.warn(`[react-markdown] Warning: please ${deprecation.to ? `use \\`${deprecation.to}\\` instead of` : \"remove\"} \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`);\n            delete deprecated[key];\n        }\n    }\n    const processor = unified().use(parse)// TODO: deprecate `plugins` in v7.0.0.\n    .use(options.remarkPlugins || options.plugins || []).use(remarkRehype, {\n        allowDangerousHtml: true\n    }).use(options.rehypePlugins || []).use(filter, options);\n    /** @type {vfile} */ let file;\n    if (typeof options.children === \"string\") {\n        file = vfile(options.children);\n    } else {\n        if (options.children !== undefined && options.children !== null) {\n            console.warn(`[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`);\n        }\n        file = vfile();\n    }\n    /** @type {Root} */ // @ts-expect-error we’ll throw if it isn’t a root next.\n    const hastNode = processor.runSync(processor.parse(file), file);\n    if (hastNode.type !== \"root\") {\n        throw new TypeError(\"Expected a `root` node\");\n    }\n    /** @type {ReactElement} */ let result = React.createElement(React.Fragment, {}, childrenToReact({\n        options: options,\n        schema: html,\n        listDepth: 0\n    }, hastNode));\n    if (options.className) {\n        result = React.createElement(\"div\", {\n            className: options.className\n        }, result);\n    }\n    return result;\n}\nReactMarkdown.defaultProps = {\n    transformLinkUri: uriTransformer\n};\nReactMarkdown.propTypes = {\n    // Core options:\n    children: PropTypes.string,\n    // Layout options:\n    className: PropTypes.string,\n    // Filter options:\n    allowElement: PropTypes.func,\n    allowedElements: PropTypes.arrayOf(PropTypes.string),\n    disallowedElements: PropTypes.arrayOf(PropTypes.string),\n    unwrapDisallowed: PropTypes.bool,\n    // Plugin options:\n    // type-coverage:ignore-next-line\n    remarkPlugins: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.func,\n        PropTypes.arrayOf(PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.func\n        ]))\n    ])),\n    // type-coverage:ignore-next-line\n    rehypePlugins: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.func,\n        PropTypes.arrayOf(PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.func\n        ]))\n    ])),\n    // Transform options:\n    sourcePos: PropTypes.bool,\n    rawSourcePos: PropTypes.bool,\n    skipHtml: PropTypes.bool,\n    includeElementIndex: PropTypes.bool,\n    transformLinkUri: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.bool\n    ]),\n    linkTarget: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.string\n    ]),\n    transformImageUri: PropTypes.func,\n    components: PropTypes.object\n};\nReactMarkdown.uriTransformer = uriTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-markdown/src/react-markdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-markdown/src/rehype-filter.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-markdown/src/rehype-filter.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst visit = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/index.js\");\nmodule.exports = rehypeFilter;\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef RehypeFilterOptions\n * @property {Array.<string>} [allowedElements]\n * @property {Array.<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */ /**\n * @type {import('unified').Plugin<[RehypeFilterOptions]>}\n */ function rehypeFilter(options) {\n    if (options.allowedElements && options.disallowedElements) {\n        throw new TypeError(\"Only one of `allowedElements` and `disallowedElements` should be defined\");\n    }\n    if (options.allowedElements || options.disallowedElements || options.allowElement) {\n        return (tree)=>{\n            const node = /** @type {Root} */ tree;\n            visit(node, \"element\", onelement);\n        };\n    }\n    /**\n   * @param {Node} node_\n   * @param {number|null|undefined} index\n   * @param {Node|null|undefined} parent_\n   * @returns {number|void}\n   */ function onelement(node_, index, parent_) {\n        const node = /** @type {Element} */ node_;\n        const parent = /** @type {Element|Root} */ parent_;\n        /** @type {boolean|undefined} */ let remove;\n        if (options.allowedElements) {\n            remove = !options.allowedElements.includes(node.tagName);\n        } else if (options.disallowedElements) {\n            remove = options.disallowedElements.includes(node.tagName);\n        }\n        if (!remove && options.allowElement && typeof index === \"number\") {\n            remove = !options.allowElement(node, index, parent);\n        }\n        if (remove && typeof index === \"number\") {\n            if (options.unwrapDisallowed && node.children) {\n                parent.children.splice(index, 1, ...node.children);\n            } else {\n                parent.children.splice(index, 1);\n            }\n            return index;\n        }\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vc3JjL3JlaHlwZS1maWx0ZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXRCQyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBRUQ7O0NBRUMsR0FDRCxTQUFTQSxhQUFhQyxPQUFPO0lBQzNCLElBQUlBLFFBQVFDLGVBQWUsSUFBSUQsUUFBUUUsa0JBQWtCLEVBQUU7UUFDekQsTUFBTSxJQUFJQyxVQUNSO0lBRUo7SUFFQSxJQUNFSCxRQUFRQyxlQUFlLElBQ3ZCRCxRQUFRRSxrQkFBa0IsSUFDMUJGLFFBQVFJLFlBQVksRUFDcEI7UUFDQSxPQUFPLENBQUNDO1lBQ04sTUFBTUMsT0FBTyxpQkFBaUIsR0FBSUQ7WUFDbENWLE1BQU1XLE1BQU0sV0FBV0M7UUFDekI7SUFDRjtJQUVBOzs7OztHQUtDLEdBQ0QsU0FBU0EsVUFBVUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLE9BQU87UUFDdEMsTUFBTUosT0FBTyxvQkFBb0IsR0FBSUU7UUFDckMsTUFBTUcsU0FBUyx5QkFBeUIsR0FBSUQ7UUFDNUMsOEJBQThCLEdBQzlCLElBQUlFO1FBRUosSUFBSVosUUFBUUMsZUFBZSxFQUFFO1lBQzNCVyxTQUFTLENBQUNaLFFBQVFDLGVBQWUsQ0FBQ1ksUUFBUSxDQUFDUCxLQUFLUSxPQUFPO1FBQ3pELE9BQU8sSUFBSWQsUUFBUUUsa0JBQWtCLEVBQUU7WUFDckNVLFNBQVNaLFFBQVFFLGtCQUFrQixDQUFDVyxRQUFRLENBQUNQLEtBQUtRLE9BQU87UUFDM0Q7UUFFQSxJQUFJLENBQUNGLFVBQVVaLFFBQVFJLFlBQVksSUFBSSxPQUFPSyxVQUFVLFVBQVU7WUFDaEVHLFNBQVMsQ0FBQ1osUUFBUUksWUFBWSxDQUFDRSxNQUFNRyxPQUFPRTtRQUM5QztRQUVBLElBQUlDLFVBQVUsT0FBT0gsVUFBVSxVQUFVO1lBQ3ZDLElBQUlULFFBQVFlLGdCQUFnQixJQUFJVCxLQUFLVSxRQUFRLEVBQUU7Z0JBQzdDTCxPQUFPSyxRQUFRLENBQUNDLE1BQU0sQ0FBQ1IsT0FBTyxNQUFNSCxLQUFLVSxRQUFRO1lBQ25ELE9BQU87Z0JBQ0xMLE9BQU9LLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDUixPQUFPO1lBQ2hDO1lBRUEsT0FBT0E7UUFDVDtRQUVBLE9BQU9TO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9zcmMvcmVoeXBlLWZpbHRlci5qcz83NDk1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gcmVoeXBlRmlsdGVyXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Ob2RlfSBOb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqXG4gKiBAY2FsbGJhY2sgQWxsb3dFbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtFbGVtZW50fFJvb3R9IHBhcmVudFxuICogQHJldHVybnMge2Jvb2xlYW58dW5kZWZpbmVkfVxuICpcbiAqIEB0eXBlZGVmIFJlaHlwZUZpbHRlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPHN0cmluZz59IFthbGxvd2VkRWxlbWVudHNdXG4gKiBAcHJvcGVydHkge0FycmF5LjxzdHJpbmc+fSBbZGlzYWxsb3dlZEVsZW1lbnRzPVtdXVxuICogQHByb3BlcnR5IHtBbGxvd0VsZW1lbnR9IFthbGxvd0VsZW1lbnRdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFt1bndyYXBEaXNhbGxvd2VkPWZhbHNlXVxuICovXG5cbi8qKlxuICogQHR5cGUge2ltcG9ydCgndW5pZmllZCcpLlBsdWdpbjxbUmVoeXBlRmlsdGVyT3B0aW9uc10+fVxuICovXG5mdW5jdGlvbiByZWh5cGVGaWx0ZXIob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5hbGxvd2VkRWxlbWVudHMgJiYgb3B0aW9ucy5kaXNhbGxvd2VkRWxlbWVudHMpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ09ubHkgb25lIG9mIGBhbGxvd2VkRWxlbWVudHNgIGFuZCBgZGlzYWxsb3dlZEVsZW1lbnRzYCBzaG91bGQgYmUgZGVmaW5lZCdcbiAgICApXG4gIH1cblxuICBpZiAoXG4gICAgb3B0aW9ucy5hbGxvd2VkRWxlbWVudHMgfHxcbiAgICBvcHRpb25zLmRpc2FsbG93ZWRFbGVtZW50cyB8fFxuICAgIG9wdGlvbnMuYWxsb3dFbGVtZW50XG4gICkge1xuICAgIHJldHVybiAodHJlZSkgPT4ge1xuICAgICAgY29uc3Qgbm9kZSA9IC8qKiBAdHlwZSB7Um9vdH0gKi8gKHRyZWUpXG4gICAgICB2aXNpdChub2RlLCAnZWxlbWVudCcsIG9uZWxlbWVudClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlX1xuICAgKiBAcGFyYW0ge251bWJlcnxudWxsfHVuZGVmaW5lZH0gaW5kZXhcbiAgICogQHBhcmFtIHtOb2RlfG51bGx8dW5kZWZpbmVkfSBwYXJlbnRfXG4gICAqIEByZXR1cm5zIHtudW1iZXJ8dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZWxlbWVudChub2RlXywgaW5kZXgsIHBhcmVudF8pIHtcbiAgICBjb25zdCBub2RlID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAobm9kZV8pXG4gICAgY29uc3QgcGFyZW50ID0gLyoqIEB0eXBlIHtFbGVtZW50fFJvb3R9ICovIChwYXJlbnRfKVxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG4gICAgbGV0IHJlbW92ZVxuXG4gICAgaWYgKG9wdGlvbnMuYWxsb3dlZEVsZW1lbnRzKSB7XG4gICAgICByZW1vdmUgPSAhb3B0aW9ucy5hbGxvd2VkRWxlbWVudHMuaW5jbHVkZXMobm9kZS50YWdOYW1lKVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kaXNhbGxvd2VkRWxlbWVudHMpIHtcbiAgICAgIHJlbW92ZSA9IG9wdGlvbnMuZGlzYWxsb3dlZEVsZW1lbnRzLmluY2x1ZGVzKG5vZGUudGFnTmFtZSlcbiAgICB9XG5cbiAgICBpZiAoIXJlbW92ZSAmJiBvcHRpb25zLmFsbG93RWxlbWVudCAmJiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICByZW1vdmUgPSAhb3B0aW9ucy5hbGxvd0VsZW1lbnQobm9kZSwgaW5kZXgsIHBhcmVudClcbiAgICB9XG5cbiAgICBpZiAocmVtb3ZlICYmIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmIChvcHRpb25zLnVud3JhcERpc2FsbG93ZWQgJiYgbm9kZS5jaGlsZHJlbikge1xuICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCAuLi5ub2RlLmNoaWxkcmVuKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluZGV4XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG59XG4iXSwibmFtZXMiOlsidmlzaXQiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlaHlwZUZpbHRlciIsIm9wdGlvbnMiLCJhbGxvd2VkRWxlbWVudHMiLCJkaXNhbGxvd2VkRWxlbWVudHMiLCJUeXBlRXJyb3IiLCJhbGxvd0VsZW1lbnQiLCJ0cmVlIiwibm9kZSIsIm9uZWxlbWVudCIsIm5vZGVfIiwiaW5kZXgiLCJwYXJlbnRfIiwicGFyZW50IiwicmVtb3ZlIiwiaW5jbHVkZXMiLCJ0YWdOYW1lIiwidW53cmFwRGlzYWxsb3dlZCIsImNoaWxkcmVuIiwic3BsaWNlIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-markdown/src/rehype-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-markdown/src/uri-transformer.js":
/*!************************************************************!*\
  !*** ./node_modules/react-markdown/src/uri-transformer.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nconst protocols = [\n    \"http\",\n    \"https\",\n    \"mailto\",\n    \"tel\"\n];\nmodule.exports = uriTransformer;\n/**\n * @param {string} uri\n * @returns {string}\n */ function uriTransformer(uri) {\n    const url = (uri || \"\").trim();\n    const first = url.charAt(0);\n    if (first === \"#\" || first === \"/\") {\n        return url;\n    }\n    const colon = url.indexOf(\":\");\n    if (colon === -1) {\n        return url;\n    }\n    let index = -1;\n    while(++index < protocols.length){\n        const protocol = protocols[index];\n        if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {\n            return url;\n        }\n    }\n    index = url.indexOf(\"?\");\n    if (index !== -1 && colon > index) {\n        return url;\n    }\n    index = url.indexOf(\"#\");\n    if (index !== -1 && colon > index) {\n        return url;\n    }\n    // eslint-disable-next-line no-script-url\n    return \"javascript:void(0)\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vc3JjL3VyaS10cmFuc2Zvcm1lci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsWUFBWTtJQUFDO0lBQVE7SUFBUztJQUFVO0NBQU07QUFFcERDLE9BQU9DLE9BQU8sR0FBR0M7QUFFakI7OztDQUdDLEdBQ0QsU0FBU0EsZUFBZUMsR0FBRztJQUN6QixNQUFNQyxNQUFNLENBQUNELE9BQU8sRUFBQyxFQUFHRSxJQUFJO0lBQzVCLE1BQU1DLFFBQVFGLElBQUlHLE1BQU0sQ0FBQztJQUV6QixJQUFJRCxVQUFVLE9BQU9BLFVBQVUsS0FBSztRQUNsQyxPQUFPRjtJQUNUO0lBRUEsTUFBTUksUUFBUUosSUFBSUssT0FBTyxDQUFDO0lBQzFCLElBQUlELFVBQVUsQ0FBQyxHQUFHO1FBQ2hCLE9BQU9KO0lBQ1Q7SUFFQSxJQUFJTSxRQUFRLENBQUM7SUFFYixNQUFPLEVBQUVBLFFBQVFYLFVBQVVZLE1BQU0sQ0FBRTtRQUNqQyxNQUFNQyxXQUFXYixTQUFTLENBQUNXLE1BQU07UUFFakMsSUFDRUYsVUFBVUksU0FBU0QsTUFBTSxJQUN6QlAsSUFBSVMsS0FBSyxDQUFDLEdBQUdELFNBQVNELE1BQU0sRUFBRUcsV0FBVyxPQUFPRixVQUNoRDtZQUNBLE9BQU9SO1FBQ1Q7SUFDRjtJQUVBTSxRQUFRTixJQUFJSyxPQUFPLENBQUM7SUFDcEIsSUFBSUMsVUFBVSxDQUFDLEtBQUtGLFFBQVFFLE9BQU87UUFDakMsT0FBT047SUFDVDtJQUVBTSxRQUFRTixJQUFJSyxPQUFPLENBQUM7SUFDcEIsSUFBSUMsVUFBVSxDQUFDLEtBQUtGLFFBQVFFLE9BQU87UUFDakMsT0FBT047SUFDVDtJQUVBLHlDQUF5QztJQUN6QyxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vc3JjL3VyaS10cmFuc2Zvcm1lci5qcz82MTA1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByb3RvY29scyA9IFsnaHR0cCcsICdodHRwcycsICdtYWlsdG8nLCAndGVsJ11cblxubW9kdWxlLmV4cG9ydHMgPSB1cmlUcmFuc2Zvcm1lclxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmlcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHVyaVRyYW5zZm9ybWVyKHVyaSkge1xuICBjb25zdCB1cmwgPSAodXJpIHx8ICcnKS50cmltKClcbiAgY29uc3QgZmlyc3QgPSB1cmwuY2hhckF0KDApXG5cbiAgaWYgKGZpcnN0ID09PSAnIycgfHwgZmlyc3QgPT09ICcvJykge1xuICAgIHJldHVybiB1cmxcbiAgfVxuXG4gIGNvbnN0IGNvbG9uID0gdXJsLmluZGV4T2YoJzonKVxuICBpZiAoY29sb24gPT09IC0xKSB7XG4gICAgcmV0dXJuIHVybFxuICB9XG5cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHByb3RvY29scy5sZW5ndGgpIHtcbiAgICBjb25zdCBwcm90b2NvbCA9IHByb3RvY29sc1tpbmRleF1cblxuICAgIGlmIChcbiAgICAgIGNvbG9uID09PSBwcm90b2NvbC5sZW5ndGggJiZcbiAgICAgIHVybC5zbGljZSgwLCBwcm90b2NvbC5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IHByb3RvY29sXG4gICAgKSB7XG4gICAgICByZXR1cm4gdXJsXG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSB1cmwuaW5kZXhPZignPycpXG4gIGlmIChpbmRleCAhPT0gLTEgJiYgY29sb24gPiBpbmRleCkge1xuICAgIHJldHVybiB1cmxcbiAgfVxuXG4gIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKVxuICBpZiAoaW5kZXggIT09IC0xICYmIGNvbG9uID4gaW5kZXgpIHtcbiAgICByZXR1cm4gdXJsXG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2NyaXB0LXVybFxuICByZXR1cm4gJ2phdmFzY3JpcHQ6dm9pZCgwKSdcbn1cbiJdLCJuYW1lcyI6WyJwcm90b2NvbHMiLCJtb2R1bGUiLCJleHBvcnRzIiwidXJpVHJhbnNmb3JtZXIiLCJ1cmkiLCJ1cmwiLCJ0cmltIiwiZmlyc3QiLCJjaGFyQXQiLCJjb2xvbiIsImluZGV4T2YiLCJpbmRleCIsImxlbmd0aCIsInByb3RvY29sIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-markdown/src/uri-transformer.js\n");

/***/ })

};
;