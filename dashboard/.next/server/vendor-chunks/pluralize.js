"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pluralize";
exports.ids = ["vendor-chunks/pluralize"];
exports.modules = {

/***/ "(ssr)/./node_modules/pluralize/pluralize.js":
/*!*********************************************!*\
  !*** ./node_modules/pluralize/pluralize.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n/* global define */ (function(root, pluralize) {\n    /* istanbul ignore else */ if (true) {\n        // Node.\n        module.exports = pluralize();\n    } else {}\n})(void 0, function() {\n    // Rule storage - pluralize and singularize need to be run sequentially,\n    // while other rules can be optimized using an object for instant lookups.\n    var pluralRules = [];\n    var singularRules = [];\n    var uncountables = {};\n    var irregularPlurals = {};\n    var irregularSingles = {};\n    /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */ function sanitizeRule(rule) {\n        if (typeof rule === \"string\") {\n            return new RegExp(\"^\" + rule + \"$\", \"i\");\n        }\n        return rule;\n    }\n    /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */ function restoreCase(word, token) {\n        // Tokens are an exact match.\n        if (word === token) return token;\n        // Lower cased words. E.g. \"hello\".\n        if (word === word.toLowerCase()) return token.toLowerCase();\n        // Upper cased words. E.g. \"WHISKY\".\n        if (word === word.toUpperCase()) return token.toUpperCase();\n        // Title cased words. E.g. \"Title\".\n        if (word[0] === word[0].toUpperCase()) {\n            return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n        }\n        // Lower cased words. E.g. \"test\".\n        return token.toLowerCase();\n    }\n    /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */ function interpolate(str, args) {\n        return str.replace(/\\$(\\d{1,2})/g, function(match, index) {\n            return args[index] || \"\";\n        });\n    }\n    /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */ function replace(word, rule) {\n        return word.replace(rule[0], function(match, index) {\n            var result = interpolate(rule[1], arguments);\n            if (match === \"\") {\n                return restoreCase(word[index - 1], result);\n            }\n            return restoreCase(match, result);\n        });\n    }\n    /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */ function sanitizeWord(token, word, rules) {\n        // Empty string or doesn't need fixing.\n        if (!token.length || uncountables.hasOwnProperty(token)) {\n            return word;\n        }\n        var len = rules.length;\n        // Iterate over the sanitization rules and use the first one to match.\n        while(len--){\n            var rule = rules[len];\n            if (rule[0].test(word)) return replace(word, rule);\n        }\n        return word;\n    }\n    /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */ function replaceWord(replaceMap, keepMap, rules) {\n        return function(word) {\n            // Get the correct token and case restoration functions.\n            var token = word.toLowerCase();\n            // Check against the keep object map.\n            if (keepMap.hasOwnProperty(token)) {\n                return restoreCase(word, token);\n            }\n            // Check against the replacement map for a direct word replacement.\n            if (replaceMap.hasOwnProperty(token)) {\n                return restoreCase(word, replaceMap[token]);\n            }\n            // Run all the rules against the word.\n            return sanitizeWord(token, word, rules);\n        };\n    }\n    /**\n   * Check if a word is part of the map.\n   */ function checkWord(replaceMap, keepMap, rules, bool) {\n        return function(word) {\n            var token = word.toLowerCase();\n            if (keepMap.hasOwnProperty(token)) return true;\n            if (replaceMap.hasOwnProperty(token)) return false;\n            return sanitizeWord(token, token, rules) === token;\n        };\n    }\n    /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */ function pluralize(word, count, inclusive) {\n        var pluralized = count === 1 ? pluralize.singular(word) : pluralize.plural(word);\n        return (inclusive ? count + \" \" : \"\") + pluralized;\n    }\n    /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */ pluralize.plural = replaceWord(irregularSingles, irregularPlurals, pluralRules);\n    /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */ pluralize.isPlural = checkWord(irregularSingles, irregularPlurals, pluralRules);\n    /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */ pluralize.singular = replaceWord(irregularPlurals, irregularSingles, singularRules);\n    /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */ pluralize.isSingular = checkWord(irregularPlurals, irregularSingles, singularRules);\n    /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */ pluralize.addPluralRule = function(rule, replacement) {\n        pluralRules.push([\n            sanitizeRule(rule),\n            replacement\n        ]);\n    };\n    /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */ pluralize.addSingularRule = function(rule, replacement) {\n        singularRules.push([\n            sanitizeRule(rule),\n            replacement\n        ]);\n    };\n    /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */ pluralize.addUncountableRule = function(word) {\n        if (typeof word === \"string\") {\n            uncountables[word.toLowerCase()] = true;\n            return;\n        }\n        // Set singular and plural references for the word.\n        pluralize.addPluralRule(word, \"$0\");\n        pluralize.addSingularRule(word, \"$0\");\n    };\n    /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */ pluralize.addIrregularRule = function(single, plural) {\n        plural = plural.toLowerCase();\n        single = single.toLowerCase();\n        irregularSingles[single] = plural;\n        irregularPlurals[plural] = single;\n    };\n    /**\n   * Irregular rules.\n   */ [\n        // Pronouns.\n        [\n            \"I\",\n            \"we\"\n        ],\n        [\n            \"me\",\n            \"us\"\n        ],\n        [\n            \"he\",\n            \"they\"\n        ],\n        [\n            \"she\",\n            \"they\"\n        ],\n        [\n            \"them\",\n            \"them\"\n        ],\n        [\n            \"myself\",\n            \"ourselves\"\n        ],\n        [\n            \"yourself\",\n            \"yourselves\"\n        ],\n        [\n            \"itself\",\n            \"themselves\"\n        ],\n        [\n            \"herself\",\n            \"themselves\"\n        ],\n        [\n            \"himself\",\n            \"themselves\"\n        ],\n        [\n            \"themself\",\n            \"themselves\"\n        ],\n        [\n            \"is\",\n            \"are\"\n        ],\n        [\n            \"was\",\n            \"were\"\n        ],\n        [\n            \"has\",\n            \"have\"\n        ],\n        [\n            \"this\",\n            \"these\"\n        ],\n        [\n            \"that\",\n            \"those\"\n        ],\n        // Words ending in with a consonant and `o`.\n        [\n            \"echo\",\n            \"echoes\"\n        ],\n        [\n            \"dingo\",\n            \"dingoes\"\n        ],\n        [\n            \"volcano\",\n            \"volcanoes\"\n        ],\n        [\n            \"tornado\",\n            \"tornadoes\"\n        ],\n        [\n            \"torpedo\",\n            \"torpedoes\"\n        ],\n        // Ends with `us`.\n        [\n            \"genus\",\n            \"genera\"\n        ],\n        [\n            \"viscus\",\n            \"viscera\"\n        ],\n        // Ends with `ma`.\n        [\n            \"stigma\",\n            \"stigmata\"\n        ],\n        [\n            \"stoma\",\n            \"stomata\"\n        ],\n        [\n            \"dogma\",\n            \"dogmata\"\n        ],\n        [\n            \"lemma\",\n            \"lemmata\"\n        ],\n        [\n            \"schema\",\n            \"schemata\"\n        ],\n        [\n            \"anathema\",\n            \"anathemata\"\n        ],\n        // Other irregular rules.\n        [\n            \"ox\",\n            \"oxen\"\n        ],\n        [\n            \"axe\",\n            \"axes\"\n        ],\n        [\n            \"die\",\n            \"dice\"\n        ],\n        [\n            \"yes\",\n            \"yeses\"\n        ],\n        [\n            \"foot\",\n            \"feet\"\n        ],\n        [\n            \"eave\",\n            \"eaves\"\n        ],\n        [\n            \"goose\",\n            \"geese\"\n        ],\n        [\n            \"tooth\",\n            \"teeth\"\n        ],\n        [\n            \"quiz\",\n            \"quizzes\"\n        ],\n        [\n            \"human\",\n            \"humans\"\n        ],\n        [\n            \"proof\",\n            \"proofs\"\n        ],\n        [\n            \"carve\",\n            \"carves\"\n        ],\n        [\n            \"valve\",\n            \"valves\"\n        ],\n        [\n            \"looey\",\n            \"looies\"\n        ],\n        [\n            \"thief\",\n            \"thieves\"\n        ],\n        [\n            \"groove\",\n            \"grooves\"\n        ],\n        [\n            \"pickaxe\",\n            \"pickaxes\"\n        ],\n        [\n            \"passerby\",\n            \"passersby\"\n        ]\n    ].forEach(function(rule) {\n        return pluralize.addIrregularRule(rule[0], rule[1]);\n    });\n    /**\n   * Pluralization rules.\n   */ [\n        [\n            /s?$/i,\n            \"s\"\n        ],\n        [\n            /[^\\u0000-\\u007F]$/i,\n            \"$0\"\n        ],\n        [\n            /([^aeiou]ese)$/i,\n            \"$1\"\n        ],\n        [\n            /(ax|test)is$/i,\n            \"$1es\"\n        ],\n        [\n            /(alias|[^aou]us|t[lm]as|gas|ris)$/i,\n            \"$1es\"\n        ],\n        [\n            /(e[mn]u)s?$/i,\n            \"$1s\"\n        ],\n        [\n            /([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i,\n            \"$1\"\n        ],\n        [\n            /(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,\n            \"$1i\"\n        ],\n        [\n            /(alumn|alg|vertebr)(?:a|ae)$/i,\n            \"$1ae\"\n        ],\n        [\n            /(seraph|cherub)(?:im)?$/i,\n            \"$1im\"\n        ],\n        [\n            /(her|at|gr)o$/i,\n            \"$1oes\"\n        ],\n        [\n            /(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i,\n            \"$1a\"\n        ],\n        [\n            /(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i,\n            \"$1a\"\n        ],\n        [\n            /sis$/i,\n            \"ses\"\n        ],\n        [\n            /(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i,\n            \"$1$2ves\"\n        ],\n        [\n            /([^aeiouy]|qu)y$/i,\n            \"$1ies\"\n        ],\n        [\n            /([^ch][ieo][ln])ey$/i,\n            \"$1ies\"\n        ],\n        [\n            /(x|ch|ss|sh|zz)$/i,\n            \"$1es\"\n        ],\n        [\n            /(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i,\n            \"$1ices\"\n        ],\n        [\n            /\\b((?:tit)?m|l)(?:ice|ouse)$/i,\n            \"$1ice\"\n        ],\n        [\n            /(pe)(?:rson|ople)$/i,\n            \"$1ople\"\n        ],\n        [\n            /(child)(?:ren)?$/i,\n            \"$1ren\"\n        ],\n        [\n            /eaux$/i,\n            \"$0\"\n        ],\n        [\n            /m[ae]n$/i,\n            \"men\"\n        ],\n        [\n            \"thou\",\n            \"you\"\n        ]\n    ].forEach(function(rule) {\n        return pluralize.addPluralRule(rule[0], rule[1]);\n    });\n    /**\n   * Singularization rules.\n   */ [\n        [\n            /s$/i,\n            \"\"\n        ],\n        [\n            /(ss)$/i,\n            \"$1\"\n        ],\n        [\n            /(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i,\n            \"$1fe\"\n        ],\n        [\n            /(ar|(?:wo|[ae])l|[eo][ao])ves$/i,\n            \"$1f\"\n        ],\n        [\n            /ies$/i,\n            \"y\"\n        ],\n        [\n            /\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i,\n            \"$1ie\"\n        ],\n        [\n            /\\b(mon|smil)ies$/i,\n            \"$1ey\"\n        ],\n        [\n            /\\b((?:tit)?m|l)ice$/i,\n            \"$1ouse\"\n        ],\n        [\n            /(seraph|cherub)im$/i,\n            \"$1\"\n        ],\n        [\n            /(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i,\n            \"$1\"\n        ],\n        [\n            /(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i,\n            \"$1sis\"\n        ],\n        [\n            /(movie|twelve|abuse|e[mn]u)s$/i,\n            \"$1\"\n        ],\n        [\n            /(test)(?:is|es)$/i,\n            \"$1is\"\n        ],\n        [\n            /(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,\n            \"$1us\"\n        ],\n        [\n            /(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i,\n            \"$1um\"\n        ],\n        [\n            /(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i,\n            \"$1on\"\n        ],\n        [\n            /(alumn|alg|vertebr)ae$/i,\n            \"$1a\"\n        ],\n        [\n            /(cod|mur|sil|vert|ind)ices$/i,\n            \"$1ex\"\n        ],\n        [\n            /(matr|append)ices$/i,\n            \"$1ix\"\n        ],\n        [\n            /(pe)(rson|ople)$/i,\n            \"$1rson\"\n        ],\n        [\n            /(child)ren$/i,\n            \"$1\"\n        ],\n        [\n            /(eau)x?$/i,\n            \"$1\"\n        ],\n        [\n            /men$/i,\n            \"man\"\n        ]\n    ].forEach(function(rule) {\n        return pluralize.addSingularRule(rule[0], rule[1]);\n    });\n    /**\n   * Uncountable rules.\n   */ [\n        // Singular words with no plurals.\n        \"adulthood\",\n        \"advice\",\n        \"agenda\",\n        \"aid\",\n        \"aircraft\",\n        \"alcohol\",\n        \"ammo\",\n        \"analytics\",\n        \"anime\",\n        \"athletics\",\n        \"audio\",\n        \"bison\",\n        \"blood\",\n        \"bream\",\n        \"buffalo\",\n        \"butter\",\n        \"carp\",\n        \"cash\",\n        \"chassis\",\n        \"chess\",\n        \"clothing\",\n        \"cod\",\n        \"commerce\",\n        \"cooperation\",\n        \"corps\",\n        \"debris\",\n        \"diabetes\",\n        \"digestion\",\n        \"elk\",\n        \"energy\",\n        \"equipment\",\n        \"excretion\",\n        \"expertise\",\n        \"firmware\",\n        \"flounder\",\n        \"fun\",\n        \"gallows\",\n        \"garbage\",\n        \"graffiti\",\n        \"hardware\",\n        \"headquarters\",\n        \"health\",\n        \"herpes\",\n        \"highjinks\",\n        \"homework\",\n        \"housework\",\n        \"information\",\n        \"jeans\",\n        \"justice\",\n        \"kudos\",\n        \"labour\",\n        \"literature\",\n        \"machinery\",\n        \"mackerel\",\n        \"mail\",\n        \"media\",\n        \"mews\",\n        \"moose\",\n        \"music\",\n        \"mud\",\n        \"manga\",\n        \"news\",\n        \"only\",\n        \"personnel\",\n        \"pike\",\n        \"plankton\",\n        \"pliers\",\n        \"police\",\n        \"pollution\",\n        \"premises\",\n        \"rain\",\n        \"research\",\n        \"rice\",\n        \"salmon\",\n        \"scissors\",\n        \"series\",\n        \"sewage\",\n        \"shambles\",\n        \"shrimp\",\n        \"software\",\n        \"species\",\n        \"staff\",\n        \"swine\",\n        \"tennis\",\n        \"traffic\",\n        \"transportation\",\n        \"trout\",\n        \"tuna\",\n        \"wealth\",\n        \"welfare\",\n        \"whiting\",\n        \"wildebeest\",\n        \"wildlife\",\n        \"you\",\n        /pok[eé]mon$/i,\n        // Regexes.\n        /[^aeiou]ese$/i,\n        /deer$/i,\n        /fish$/i,\n        /measles$/i,\n        /o[iu]s$/i,\n        /pox$/i,\n        /sheep$/i\n    ].forEach(pluralize.addUncountableRule);\n    return pluralize;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pluralize/pluralize.js\n");

/***/ })

};
;