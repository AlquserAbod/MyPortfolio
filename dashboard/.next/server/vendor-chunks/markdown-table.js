"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/markdown-table";
exports.ids = ["vendor-chunks/markdown-table"];
exports.modules = {

/***/ "(ssr)/./node_modules/markdown-table/index.js":
/*!**********************************************!*\
  !*** ./node_modules/markdown-table/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar repeat = __webpack_require__(/*! repeat-string */ \"(ssr)/./node_modules/repeat-string/index.js\");\nmodule.exports = markdownTable;\nvar trailingWhitespace = / +$/;\n// Characters.\nvar space = \" \";\nvar lineFeed = \"\\n\";\nvar dash = \"-\";\nvar colon = \":\";\nvar verticalBar = \"|\";\nvar x = 0;\nvar C = 67;\nvar L = 76;\nvar R = 82;\nvar c = 99;\nvar l = 108;\nvar r = 114;\n// Create a table from a matrix of strings.\nfunction markdownTable(table, options) {\n    var settings = options || {};\n    var padding = settings.padding !== false;\n    var start = settings.delimiterStart !== false;\n    var end = settings.delimiterEnd !== false;\n    var align = (settings.align || []).concat();\n    var alignDelimiters = settings.alignDelimiters !== false;\n    var alignments = [];\n    var stringLength = settings.stringLength || defaultStringLength;\n    var rowIndex = -1;\n    var rowLength = table.length;\n    var cellMatrix = [];\n    var sizeMatrix = [];\n    var row = [];\n    var sizes = [];\n    var longestCellByColumn = [];\n    var mostCellsPerRow = 0;\n    var cells;\n    var columnIndex;\n    var columnLength;\n    var largest;\n    var size;\n    var cell;\n    var lines;\n    var line;\n    var before;\n    var after;\n    var code;\n    // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n    // do superfluous work when aligning, so optimize for aligning.\n    while(++rowIndex < rowLength){\n        cells = table[rowIndex];\n        columnIndex = -1;\n        columnLength = cells.length;\n        row = [];\n        sizes = [];\n        if (columnLength > mostCellsPerRow) {\n            mostCellsPerRow = columnLength;\n        }\n        while(++columnIndex < columnLength){\n            cell = serialize(cells[columnIndex]);\n            if (alignDelimiters === true) {\n                size = stringLength(cell);\n                sizes[columnIndex] = size;\n                largest = longestCellByColumn[columnIndex];\n                if (largest === undefined || size > largest) {\n                    longestCellByColumn[columnIndex] = size;\n                }\n            }\n            row.push(cell);\n        }\n        cellMatrix[rowIndex] = row;\n        sizeMatrix[rowIndex] = sizes;\n    }\n    // Figure out which alignments to use.\n    columnIndex = -1;\n    columnLength = mostCellsPerRow;\n    if (typeof align === \"object\" && \"length\" in align) {\n        while(++columnIndex < columnLength){\n            alignments[columnIndex] = toAlignment(align[columnIndex]);\n        }\n    } else {\n        code = toAlignment(align);\n        while(++columnIndex < columnLength){\n            alignments[columnIndex] = code;\n        }\n    }\n    // Inject the alignment row.\n    columnIndex = -1;\n    columnLength = mostCellsPerRow;\n    row = [];\n    sizes = [];\n    while(++columnIndex < columnLength){\n        code = alignments[columnIndex];\n        before = \"\";\n        after = \"\";\n        if (code === l) {\n            before = colon;\n        } else if (code === r) {\n            after = colon;\n        } else if (code === c) {\n            before = colon;\n            after = colon;\n        }\n        // There *must* be at least one hyphen-minus in each alignment cell.\n        size = alignDelimiters ? Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length) : 1;\n        cell = before + repeat(dash, size) + after;\n        if (alignDelimiters === true) {\n            size = before.length + size + after.length;\n            if (size > longestCellByColumn[columnIndex]) {\n                longestCellByColumn[columnIndex] = size;\n            }\n            sizes[columnIndex] = size;\n        }\n        row[columnIndex] = cell;\n    }\n    // Inject the alignment row.\n    cellMatrix.splice(1, 0, row);\n    sizeMatrix.splice(1, 0, sizes);\n    rowIndex = -1;\n    rowLength = cellMatrix.length;\n    lines = [];\n    while(++rowIndex < rowLength){\n        row = cellMatrix[rowIndex];\n        sizes = sizeMatrix[rowIndex];\n        columnIndex = -1;\n        columnLength = mostCellsPerRow;\n        line = [];\n        while(++columnIndex < columnLength){\n            cell = row[columnIndex] || \"\";\n            before = \"\";\n            after = \"\";\n            if (alignDelimiters === true) {\n                size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);\n                code = alignments[columnIndex];\n                if (code === r) {\n                    before = repeat(space, size);\n                } else if (code === c) {\n                    if (size % 2 === 0) {\n                        before = repeat(space, size / 2);\n                        after = before;\n                    } else {\n                        before = repeat(space, size / 2 + 0.5);\n                        after = repeat(space, size / 2 - 0.5);\n                    }\n                } else {\n                    after = repeat(space, size);\n                }\n            }\n            if (start === true && columnIndex === 0) {\n                line.push(verticalBar);\n            }\n            if (padding === true && // Don’t add the opening space if we’re not aligning and the cell is\n            // empty: there will be a closing space.\n            !(alignDelimiters === false && cell === \"\") && (start === true || columnIndex !== 0)) {\n                line.push(space);\n            }\n            if (alignDelimiters === true) {\n                line.push(before);\n            }\n            line.push(cell);\n            if (alignDelimiters === true) {\n                line.push(after);\n            }\n            if (padding === true) {\n                line.push(space);\n            }\n            if (end === true || columnIndex !== columnLength - 1) {\n                line.push(verticalBar);\n            }\n        }\n        line = line.join(\"\");\n        if (end === false) {\n            line = line.replace(trailingWhitespace, \"\");\n        }\n        lines.push(line);\n    }\n    return lines.join(lineFeed);\n}\nfunction serialize(value) {\n    return value === null || value === undefined ? \"\" : String(value);\n}\nfunction defaultStringLength(value) {\n    return value.length;\n}\nfunction toAlignment(value) {\n    var code = typeof value === \"string\" ? value.charCodeAt(0) : x;\n    return code === L || code === l ? l : code === R || code === r ? r : code === C || code === c ? c : x;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/markdown-table/index.js\n");

/***/ })

};
;