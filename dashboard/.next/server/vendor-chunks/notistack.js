"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/notistack";
exports.ids = ["vendor-chunks/notistack"];
exports.modules = {

/***/ "(ssr)/./node_modules/notistack/dist/notistack.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/notistack/dist/notistack.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SnackbarContent: () => (/* binding */ SnackbarContent),\n/* harmony export */   SnackbarProvider: () => (/* binding */ SnackbarProvider),\n/* harmony export */   useSnackbar: () => (/* binding */ useSnackbar),\n/* harmony export */   withSnackbar: () => (/* binding */ withSnackbar)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/notistack/node_modules/clsx/dist/clsx.m.js\");\n/* harmony import */ var _mui_material_Slide__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material/Slide */ \"(ssr)/./node_modules/@mui/material/Slide/Slide.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/styled.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/system/esm/colorManipulator.js\");\n/* harmony import */ var _mui_material_Collapse__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @mui/material/Collapse */ \"(ssr)/./node_modules/@mui/material/Collapse/Collapse.js\");\n/* harmony import */ var _mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/material/SvgIcon */ \"(ssr)/./node_modules/@mui/material/SvgIcon/SvgIcon.js\");\n/* harmony import */ var _mui_material_ClickAwayListener__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material/ClickAwayListener */ \"(ssr)/./node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hoist-non-react-statics */ \"(ssr)/./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n\n\n\n\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nvar SnackbarContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext();\nvar allClasses = {\n    mui: {\n        root: {},\n        anchorOriginTopCenter: {},\n        anchorOriginBottomCenter: {},\n        anchorOriginTopRight: {},\n        anchorOriginBottomRight: {},\n        anchorOriginTopLeft: {},\n        anchorOriginBottomLeft: {}\n    },\n    container: {\n        containerRoot: {},\n        containerAnchorOriginTopCenter: {},\n        containerAnchorOriginBottomCenter: {},\n        containerAnchorOriginTopRight: {},\n        containerAnchorOriginBottomRight: {},\n        containerAnchorOriginTopLeft: {},\n        containerAnchorOriginBottomLeft: {}\n    }\n};\nvar MESSAGES = {\n    NO_PERSIST_ALL: \"WARNING - notistack: Reached maxSnack while all enqueued snackbars have 'persist' flag. Notistack will dismiss the oldest snackbar anyway to allow other ones in the queue to be presented.\"\n};\nvar SNACKBAR_INDENTS = {\n    view: {\n        \"default\": 20,\n        dense: 4\n    },\n    snackbar: {\n        \"default\": 6,\n        dense: 2\n    }\n};\nvar DEFAULTS = {\n    maxSnack: 3,\n    dense: false,\n    hideIconVariant: false,\n    variant: \"default\",\n    autoHideDuration: 5000,\n    anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"left\"\n    },\n    TransitionComponent: _mui_material_Slide__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    transitionDuration: {\n        enter: 225,\n        exit: 195\n    }\n};\nvar capitalise = function capitalise(text) {\n    return text.charAt(0).toUpperCase() + text.slice(1);\n};\nvar originKeyExtractor = function originKeyExtractor(anchor) {\n    return \"\" + capitalise(anchor.vertical) + capitalise(anchor.horizontal);\n};\n/**\r\n * Omit SnackbarContainer class keys that are not needed for SnackbarItem\r\n */ var omitContainerKeys = function omitContainerKeys(classes) {\n    return Object.keys(classes).filter(function(key) {\n        return !allClasses.container[key];\n    }).reduce(function(obj, key) {\n        var _extends2;\n        return _extends({}, obj, (_extends2 = {}, _extends2[key] = classes[key], _extends2));\n    }, {});\n};\nvar REASONS = {\n    TIMEOUT: \"timeout\",\n    CLICKAWAY: \"clickaway\",\n    MAXSNACK: \"maxsnack\",\n    INSTRUCTED: \"instructed\"\n};\n/** Tranforms classes name */ var transformer = {\n    toContainerAnchorOrigin: function toContainerAnchorOrigin(origin) {\n        return \"containerAnchorOrigin\" + origin;\n    },\n    toAnchorOrigin: function toAnchorOrigin(_ref) {\n        var vertical = _ref.vertical, horizontal = _ref.horizontal;\n        return \"anchorOrigin\" + capitalise(vertical) + capitalise(horizontal);\n    },\n    toVariant: function toVariant(variant) {\n        return \"variant\" + capitalise(variant);\n    }\n};\nvar isDefined = function isDefined(value) {\n    return !!value || value === 0;\n};\nvar numberOrNull = function numberOrNull(numberish) {\n    return typeof numberish === \"number\" || numberish === null;\n}; // @ts-ignore\nvar merge = function merge(options, props, defaults) {\n    return function(name) {\n        if (name === \"autoHideDuration\") {\n            if (numberOrNull(options.autoHideDuration)) return options.autoHideDuration;\n            if (numberOrNull(props.autoHideDuration)) return props.autoHideDuration;\n            return DEFAULTS.autoHideDuration;\n        }\n        return options[name] || props[name] || defaults[name];\n    };\n};\nfunction objectMerge(options, props, defaults) {\n    if (options === void 0) {\n        options = {};\n    }\n    if (props === void 0) {\n        props = {};\n    }\n    if (defaults === void 0) {\n        defaults = {};\n    }\n    return _extends({}, defaults, {}, props, {}, options);\n}\nvar componentName = \"SnackbarContent\";\nvar classes = {\n    root: componentName + \"-root\"\n};\nvar Root = /*#__PURE__*/ (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"div\")(function(_ref) {\n    var _ref2, _ref3;\n    var theme = _ref.theme;\n    return _ref3 = {}, _ref3[\"&.\" + classes.root] = (_ref2 = {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        flexGrow: 1\n    }, _ref2[theme.breakpoints.up(\"sm\")] = {\n        flexGrow: \"initial\",\n        minWidth: 288\n    }, _ref2), _ref3;\n});\nvar SnackbarContent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(_ref4, ref) {\n    var className = _ref4.className, props = _objectWithoutPropertiesLoose(_ref4, [\n        \"className\"\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Root, Object.assign({\n        ref: ref,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(classes.root, className)\n    }, props));\n});\nvar DIRECTION = {\n    right: \"left\",\n    left: \"right\",\n    bottom: \"up\",\n    top: \"down\"\n};\nvar getTransitionDirection = function getTransitionDirection(anchorOrigin) {\n    if (anchorOrigin.horizontal !== \"center\") {\n        return DIRECTION[anchorOrigin.horizontal];\n    }\n    return DIRECTION[anchorOrigin.vertical];\n};\nvar CheckIcon = function CheckIcon(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_6__[\"default\"], Object.assign({}, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41\\n        10.59L10 14.17L17.59 6.58L19 8L10 17Z\"\n    }));\n};\nvar WarningIcon = function WarningIcon(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_6__[\"default\"], Object.assign({}, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z\"\n    }));\n};\nvar ErrorIcon = function ErrorIcon(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_6__[\"default\"], Object.assign({}, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,\\n        6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,\\n        13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z\"\n    }));\n};\nvar InfoIcon = function InfoIcon(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_6__[\"default\"], Object.assign({}, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,\\n        0 22,12A10,10 0 0,0 12,2Z\"\n    }));\n};\nvar iconStyles = {\n    fontSize: 20,\n    marginInlineEnd: 8\n};\nvar defaultIconVariants = {\n    \"default\": undefined,\n    success: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CheckIcon, {\n        style: iconStyles\n    }),\n    warning: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WarningIcon, {\n        style: iconStyles\n    }),\n    error: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ErrorIcon, {\n        style: iconStyles\n    }),\n    info: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InfoIcon, {\n        style: iconStyles\n    })\n};\n/**\n * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/createChainedFunction.js\n */ function createChainedFunction(funcs, extraArg) {\n    return funcs.reduce(function(acc, func) {\n        if (func == null) return acc;\n        if (true) {\n            if (typeof func !== \"function\") {\n                // eslint-disable-next-line no-console\n                console.error(\"Invalid Argument Type. must only provide functions, undefined, or null.\");\n            }\n        }\n        return function chainedFunction() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            var argums = [].concat(args);\n            if (extraArg && argums.indexOf(extraArg) === -1) {\n                argums.push(extraArg);\n            }\n            acc.apply(this, argums);\n            func.apply(this, argums);\n        };\n    }, function() {});\n}\n/**\n * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/useEventCallback.js\n */ var useEnhancedEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useEventCallback(fn) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(fn);\n    useEnhancedEffect(function() {\n        ref.current = fn;\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        return ref.current.apply(void 0, arguments);\n    }, []);\n}\nvar Snackbar = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(props, ref) {\n    var children = props.children, autoHideDuration = props.autoHideDuration, ClickAwayListenerProps = props.ClickAwayListenerProps, _props$disableWindowB = props.disableWindowBlurListener, disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB, onClose = props.onClose, onMouseEnter = props.onMouseEnter, onMouseLeave = props.onMouseLeave, open = props.open, resumeHideDuration = props.resumeHideDuration, other = _objectWithoutPropertiesLoose(props, [\n        \"children\",\n        \"autoHideDuration\",\n        \"ClickAwayListenerProps\",\n        \"disableWindowBlurListener\",\n        \"onClose\",\n        \"onMouseEnter\",\n        \"onMouseLeave\",\n        \"open\",\n        \"resumeHideDuration\"\n    ]);\n    var timerAutoHide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var handleClose = useEventCallback(function() {\n        if (onClose) {\n            onClose.apply(void 0, arguments);\n        }\n    });\n    var setAutoHideTimer = useEventCallback(function(autoHideDurationParam) {\n        if (!onClose || autoHideDurationParam == null) {\n            return;\n        }\n        clearTimeout(timerAutoHide.current);\n        timerAutoHide.current = setTimeout(function() {\n            handleClose(null, REASONS.TIMEOUT);\n        }, autoHideDurationParam);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (open) {\n            setAutoHideTimer(autoHideDuration);\n        }\n        return function() {\n            clearTimeout(timerAutoHide.current);\n        };\n    }, [\n        open,\n        autoHideDuration,\n        setAutoHideTimer\n    ]);\n    /**\n   * Pause the timer when the user is interacting with the Snackbar\n   * or when the user hide the window.\n   */ var handlePause = function handlePause() {\n        clearTimeout(timerAutoHide.current);\n    };\n    /**\n   * Restart the timer when the user is no longer interacting with the Snackbar\n   * or when the window is shown back.\n   */ var handleResume = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        if (autoHideDuration != null) {\n            setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n        }\n    }, [\n        autoHideDuration,\n        resumeHideDuration,\n        setAutoHideTimer\n    ]);\n    var handleMouseEnter = function handleMouseEnter(event) {\n        if (onMouseEnter) {\n            onMouseEnter(event);\n        }\n        handlePause();\n    };\n    var handleMouseLeave = function handleMouseLeave(event) {\n        if (onMouseLeave) {\n            onMouseLeave(event);\n        }\n        handleResume();\n    };\n    var handleClickAway = function handleClickAway(event) {\n        if (onClose) {\n            onClose(event, REASONS.CLICKAWAY);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!disableWindowBlurListener && open) {\n            window.addEventListener(\"focus\", handleResume);\n            window.addEventListener(\"blur\", handlePause);\n            return function() {\n                window.removeEventListener(\"focus\", handleResume);\n                window.removeEventListener(\"blur\", handlePause);\n            };\n        }\n        return undefined;\n    }, [\n        disableWindowBlurListener,\n        handleResume,\n        open\n    ]);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_mui_material_ClickAwayListener__WEBPACK_IMPORTED_MODULE_7__.ClickAwayListener, _extends({\n        onClickAway: handleClickAway\n    }, ClickAwayListenerProps), /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", _extends({\n        onMouseEnter: handleMouseEnter,\n        onMouseLeave: handleMouseLeave,\n        ref: ref\n    }, other), children));\n});\nvar componentName$1 = \"SnackbarItem\";\nvar classes$1 = {\n    contentRoot: componentName$1 + \"-contentRoot\",\n    lessPadding: componentName$1 + \"-lessPadding\",\n    variantSuccess: componentName$1 + \"-variantSuccess\",\n    variantError: componentName$1 + \"-variantError\",\n    variantInfo: componentName$1 + \"-variantInfo\",\n    variantWarning: componentName$1 + \"-variantWarning\",\n    message: componentName$1 + \"-message\",\n    action: componentName$1 + \"-action\",\n    wrappedRoot: componentName$1 + \"-wrappedRoot\"\n};\nvar StyledSnackbar = /*#__PURE__*/ (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Snackbar)(function(_ref) {\n    var _ref2;\n    var theme = _ref.theme;\n    var mode = theme.palette.mode || theme.palette.type;\n    var backgroundColor = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_8__.emphasize)(theme.palette.background[\"default\"], mode === \"light\" ? 0.8 : 0.98);\n    return _ref2 = {}, _ref2[\"&.\" + classes$1.wrappedRoot] = {\n        position: \"relative\",\n        transform: \"translateX(0)\",\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    }, _ref2[\".\" + classes$1.contentRoot] = _extends({}, theme.typography.body2, {\n        backgroundColor: backgroundColor,\n        color: theme.palette.getContrastText(backgroundColor),\n        alignItems: \"center\",\n        padding: \"6px 16px\",\n        borderRadius: \"4px\",\n        boxShadow: \"0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)\"\n    }), _ref2[\".\" + classes$1.lessPadding] = {\n        paddingLeft: 8 * 2.5\n    }, _ref2[\".\" + classes$1.variantSuccess] = {\n        backgroundColor: \"#43a047\",\n        color: \"#fff\"\n    }, _ref2[\".\" + classes$1.variantError] = {\n        backgroundColor: \"#d32f2f\",\n        color: \"#fff\"\n    }, _ref2[\".\" + classes$1.variantInfo] = {\n        backgroundColor: \"#2196f3\",\n        color: \"#fff\"\n    }, _ref2[\".\" + classes$1.variantWarning] = {\n        backgroundColor: \"#ff9800\",\n        color: \"#fff\"\n    }, _ref2[\".\" + classes$1.message] = {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: \"8px 0\"\n    }, _ref2[\".\" + classes$1.action] = {\n        display: \"flex\",\n        alignItems: \"center\",\n        marginLeft: \"auto\",\n        paddingLeft: 16,\n        marginRight: -8\n    }, _ref2;\n});\nvar SnackbarItem = function SnackbarItem(_ref3) {\n    var propClasses = _ref3.classes, props = _objectWithoutPropertiesLoose(_ref3, [\n        \"classes\"\n    ]);\n    var timeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true), collapsed = _useState[0], setCollapsed = _useState[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        return function() {\n            if (timeout.current) {\n                clearTimeout(timeout.current);\n            }\n        };\n    }, []);\n    var handleClose = createChainedFunction([\n        props.snack.onClose,\n        props.onClose\n    ], props.snack.key);\n    var handleEntered = function handleEntered() {\n        if (props.snack.requestClose) {\n            handleClose(null, REASONS.INSTRCUTED);\n        }\n    };\n    var handleExitedScreen = function handleExitedScreen() {\n        timeout.current = setTimeout(function() {\n            setCollapsed(!collapsed);\n        }, 125);\n    };\n    var style = props.style, otherAriaAttributes = props.ariaAttributes, otherClassName = props.className, hideIconVariant = props.hideIconVariant, iconVariant = props.iconVariant, snack = props.snack, otherAction = props.action, otherContent = props.content, otherTranComponent = props.TransitionComponent, otherTranProps = props.TransitionProps, otherTranDuration = props.transitionDuration, other = _objectWithoutPropertiesLoose(props, [\n        \"style\",\n        \"dense\",\n        \"ariaAttributes\",\n        \"className\",\n        \"hideIconVariant\",\n        \"iconVariant\",\n        \"snack\",\n        \"action\",\n        \"content\",\n        \"TransitionComponent\",\n        \"TransitionProps\",\n        \"transitionDuration\",\n        \"onEnter\",\n        \"onEntered\",\n        \"onEntering\",\n        \"onExit\",\n        \"onExited\",\n        \"onExiting\"\n    ]);\n    var key = snack.key, open = snack.open, singleClassName = snack.className, variant = snack.variant, singleContent = snack.content, singleAction = snack.action, singleAriaAttributes = snack.ariaAttributes, anchorOrigin = snack.anchorOrigin, snackMessage = snack.message, singleTranComponent = snack.TransitionComponent, singleTranProps = snack.TransitionProps, singleTranDuration = snack.transitionDuration, singleSnackProps = _objectWithoutPropertiesLoose(snack, [\n        \"persist\",\n        \"key\",\n        \"open\",\n        \"entered\",\n        \"requestClose\",\n        \"className\",\n        \"variant\",\n        \"content\",\n        \"action\",\n        \"ariaAttributes\",\n        \"anchorOrigin\",\n        \"message\",\n        \"TransitionComponent\",\n        \"TransitionProps\",\n        \"transitionDuration\",\n        \"onEnter\",\n        \"onEntered\",\n        \"onEntering\",\n        \"onExit\",\n        \"onExited\",\n        \"onExiting\"\n    ]);\n    var icon = _extends({}, defaultIconVariants, {}, iconVariant)[variant];\n    var ariaAttributes = _extends({\n        \"aria-describedby\": \"notistack-snackbar\"\n    }, objectMerge(singleAriaAttributes, otherAriaAttributes));\n    var TransitionComponent = singleTranComponent || otherTranComponent || DEFAULTS.TransitionComponent;\n    var transitionDuration = objectMerge(singleTranDuration, otherTranDuration, DEFAULTS.transitionDuration);\n    var transitionProps = _extends({\n        direction: getTransitionDirection(anchorOrigin)\n    }, objectMerge(singleTranProps, otherTranProps));\n    var action = singleAction || otherAction;\n    if (typeof action === \"function\") {\n        action = action(key);\n    }\n    var content = singleContent || otherContent;\n    if (typeof content === \"function\") {\n        content = content(key, snack.message);\n    } // eslint-disable-next-line operator-linebreak\n    var callbacks = [\n        \"onEnter\",\n        \"onEntering\",\n        \"onEntered\",\n        \"onExit\",\n        \"onExiting\",\n        \"onExited\"\n    ].reduce(function(acc, cbName) {\n        var _extends2;\n        return _extends({}, acc, (_extends2 = {}, _extends2[cbName] = createChainedFunction([\n            props.snack[cbName],\n            props[cbName]\n        ], props.snack.key), _extends2));\n    }, {});\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n        unmountOnExit: true,\n        timeout: 175,\n        \"in\": collapsed,\n        onExited: callbacks.onExited\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledSnackbar, Object.assign({}, other, singleSnackProps, {\n        open: open,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(propClasses.root, classes$1.wrappedRoot, propClasses[transformer.toAnchorOrigin(anchorOrigin)]),\n        onClose: handleClose\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TransitionComponent, Object.assign({\n        appear: true,\n        \"in\": open,\n        timeout: transitionDuration\n    }, transitionProps, {\n        onExit: callbacks.onExit,\n        onExiting: callbacks.onExiting,\n        onExited: handleExitedScreen,\n        onEnter: callbacks.onEnter,\n        onEntering: callbacks.onEntering,\n        // order matters. first callbacks.onEntered to set entered: true,\n        // then handleEntered to check if there's a request for closing\n        onEntered: createChainedFunction([\n            callbacks.onEntered,\n            handleEntered\n        ])\n    }), content || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SnackbarContent, Object.assign({}, ariaAttributes, {\n        role: \"alert\",\n        style: style,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(classes$1.contentRoot, classes$1[transformer.toVariant(variant)], propClasses[transformer.toVariant(variant)], otherClassName, singleClassName, !hideIconVariant && icon && classes$1.lessPadding)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        id: ariaAttributes[\"aria-describedby\"],\n        className: classes$1.message\n    }, !hideIconVariant ? icon : null, snackMessage), action && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: classes$1.action\n    }, action)))));\n};\nvar collapse = {\n    // Material-UI 4.12.x and above uses MuiCollapse-root; earlier versions use\n    // Mui-Collapse-container.  https://github.com/mui-org/material-ui/pull/24084\n    container: \"& > .MuiCollapse-container, & > .MuiCollapse-root\",\n    wrapper: \"& > .MuiCollapse-container > .MuiCollapse-wrapper, & > .MuiCollapse-root > .MuiCollapse-wrapper\"\n};\nvar xsWidthMargin = 16;\nvar componentName$2 = \"SnackbarContainer\";\nvar classes$2 = {\n    root: componentName$2 + \"-root\",\n    rootDense: componentName$2 + \"-rootDense\",\n    top: componentName$2 + \"-top\",\n    bottom: componentName$2 + \"-bottom\",\n    left: componentName$2 + \"-left\",\n    right: componentName$2 + \"-right\",\n    center: componentName$2 + \"-center\"\n};\nvar Root$1 = /*#__PURE__*/ (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"div\")(function(_ref) {\n    var _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;\n    var theme = _ref.theme;\n    return _ref7 = {}, _ref7[\"&.\" + classes$2.root] = (_ref2 = {\n        boxSizing: \"border-box\",\n        display: \"flex\",\n        maxHeight: \"100%\",\n        position: \"fixed\",\n        zIndex: theme.zIndex.snackbar,\n        height: \"auto\",\n        width: \"auto\",\n        transition: \"top 300ms ease 0ms, right 300ms ease 0ms, bottom 300ms ease 0ms, left 300ms ease 0ms, margin 300ms ease 0ms, max-width 300ms ease 0ms\",\n        // container itself is invisible and should not block clicks, clicks should be passed to its children\n        pointerEvents: \"none\"\n    }, _ref2[collapse.container] = {\n        pointerEvents: \"all\"\n    }, _ref2[collapse.wrapper] = {\n        padding: SNACKBAR_INDENTS.snackbar[\"default\"] + \"px 0px\",\n        transition: \"padding 300ms ease 0ms\"\n    }, _ref2.maxWidth = \"calc(100% - \" + SNACKBAR_INDENTS.view[\"default\"] * 2 + \"px)\", _ref2[theme.breakpoints.down(\"sm\")] = {\n        width: \"100%\",\n        maxWidth: \"calc(100% - \" + xsWidthMargin * 2 + \"px)\"\n    }, _ref2), _ref7[\"&.\" + classes$2.rootDense] = (_ref3 = {}, _ref3[collapse.wrapper] = {\n        padding: SNACKBAR_INDENTS.snackbar.dense + \"px 0px\"\n    }, _ref3), _ref7[\"&.\" + classes$2.top] = {\n        top: SNACKBAR_INDENTS.view[\"default\"] - SNACKBAR_INDENTS.snackbar[\"default\"],\n        flexDirection: \"column\"\n    }, _ref7[\"&.\" + classes$2.bottom] = {\n        bottom: SNACKBAR_INDENTS.view[\"default\"] - SNACKBAR_INDENTS.snackbar[\"default\"],\n        flexDirection: \"column-reverse\"\n    }, _ref7[\"&.\" + classes$2.left] = (_ref4 = {\n        left: SNACKBAR_INDENTS.view[\"default\"]\n    }, _ref4[theme.breakpoints.up(\"sm\")] = {\n        alignItems: \"flex-start\"\n    }, _ref4[theme.breakpoints.down(\"sm\")] = {\n        left: xsWidthMargin + \"px\"\n    }, _ref4), _ref7[\"&.\" + classes$2.right] = (_ref5 = {\n        right: SNACKBAR_INDENTS.view[\"default\"]\n    }, _ref5[theme.breakpoints.up(\"sm\")] = {\n        alignItems: \"flex-end\"\n    }, _ref5[theme.breakpoints.down(\"sm\")] = {\n        right: xsWidthMargin + \"px\"\n    }, _ref5), _ref7[\"&.\" + classes$2.center] = (_ref6 = {\n        left: \"50%\",\n        transform: \"translateX(-50%)\"\n    }, _ref6[theme.breakpoints.up(\"sm\")] = {\n        alignItems: \"center\"\n    }, _ref6), _ref7;\n});\nvar SnackbarContainer = function SnackbarContainer(props) {\n    var className = props.className, anchorOrigin = props.anchorOrigin, dense = props.dense, other = _objectWithoutPropertiesLoose(props, [\n        \"className\",\n        \"anchorOrigin\",\n        \"dense\"\n    ]);\n    var combinedClassname = (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(classes$2[anchorOrigin.vertical], classes$2[anchorOrigin.horizontal], classes$2.root, className, dense && classes$2.rootDense);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Root$1, Object.assign({\n        className: combinedClassname\n    }, other));\n};\nvar SnackbarContainer$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().memo(SnackbarContainer);\n/* eslint-disable */ var __DEV__ = \"development\" !== \"production\";\nvar warning = function(message) {\n    if (!__DEV__) return;\n    if (typeof console !== \"undefined\") {\n        console.error(message);\n    }\n    try {\n        throw new Error(message);\n    } catch (x) {}\n};\nvar SnackbarProvider = /*#__PURE__*/ function(_Component) {\n    _inheritsLoose(SnackbarProvider, _Component);\n    function SnackbarProvider(props) {\n        var _this;\n        _this = _Component.call(this, props) || this;\n        /**\r\n     * Adds a new snackbar to the queue to be presented.\r\n     * Returns generated or user defined key referencing the new snackbar or null\r\n     */ _this.enqueueSnackbar = function(message, opts) {\n            if (opts === void 0) {\n                opts = {};\n            }\n            var _opts = opts, key = _opts.key, preventDuplicate = _opts.preventDuplicate, options = _objectWithoutPropertiesLoose(_opts, [\n                \"key\",\n                \"preventDuplicate\"\n            ]);\n            var hasSpecifiedKey = isDefined(key);\n            var id = hasSpecifiedKey ? key : new Date().getTime() + Math.random();\n            var merger = merge(options, _this.props, DEFAULTS);\n            var snack = _extends({\n                key: id\n            }, options, {\n                message: message,\n                open: true,\n                entered: false,\n                requestClose: false,\n                variant: merger(\"variant\"),\n                anchorOrigin: merger(\"anchorOrigin\"),\n                autoHideDuration: merger(\"autoHideDuration\")\n            });\n            if (options.persist) {\n                snack.autoHideDuration = undefined;\n            }\n            _this.setState(function(state) {\n                if (preventDuplicate === undefined && _this.props.preventDuplicate || preventDuplicate) {\n                    var compareFunction = function compareFunction(item) {\n                        return hasSpecifiedKey ? item.key === key : item.message === message;\n                    };\n                    var inQueue = state.queue.findIndex(compareFunction) > -1;\n                    var inView = state.snacks.findIndex(compareFunction) > -1;\n                    if (inQueue || inView) {\n                        return state;\n                    }\n                }\n                return _this.handleDisplaySnack(_extends({}, state, {\n                    queue: [].concat(state.queue, [\n                        snack\n                    ])\n                }));\n            });\n            return id;\n        };\n        /**\r\n     * Reducer: Display snack if there's space for it. Otherwise, immediately\r\n     * begin dismissing the oldest message to start showing the new one.\r\n     */ _this.handleDisplaySnack = function(state) {\n            var snacks = state.snacks;\n            if (snacks.length >= _this.maxSnack) {\n                return _this.handleDismissOldest(state);\n            }\n            return _this.processQueue(state);\n        };\n        /**\r\n     * Reducer: Display items (notifications) in the queue if there's space for them.\r\n     */ _this.processQueue = function(state) {\n            var queue = state.queue, snacks = state.snacks;\n            if (queue.length > 0) {\n                return _extends({}, state, {\n                    snacks: [].concat(snacks, [\n                        queue[0]\n                    ]),\n                    queue: queue.slice(1, queue.length)\n                });\n            }\n            return state;\n        };\n        /**\r\n     * Reducer: Hide oldest snackbar on the screen because there exists a new one which we have to display.\r\n     * (ignoring the one with 'persist' flag. i.e. explicitly told by user not to get dismissed).\r\n     *\r\n     * Note 1: If there is already a message leaving the screen, no new messages are dismissed.\r\n     * Note 2: If the oldest message has not yet entered the screen, only a request to close the\r\n     *         snackbar is made. Once it entered the screen, it will be immediately dismissed.\r\n     */ _this.handleDismissOldest = function(state) {\n            if (state.snacks.some(function(item) {\n                return !item.open || item.requestClose;\n            })) {\n                return state;\n            }\n            var popped = false;\n            var ignore = false;\n            var persistentCount = state.snacks.reduce(function(acc, current) {\n                return acc + (current.open && current.persist ? 1 : 0);\n            }, 0);\n            if (persistentCount === _this.maxSnack) {\n                 true ? warning(MESSAGES.NO_PERSIST_ALL) : 0;\n                ignore = true;\n            }\n            var snacks = state.snacks.map(function(item) {\n                if (!popped && (!item.persist || ignore)) {\n                    popped = true;\n                    if (!item.entered) {\n                        return _extends({}, item, {\n                            requestClose: true\n                        });\n                    }\n                    if (item.onClose) item.onClose(null, REASONS.MAXSNACK, item.key);\n                    if (_this.props.onClose) _this.props.onClose(null, REASONS.MAXSNACK, item.key);\n                    return _extends({}, item, {\n                        open: false\n                    });\n                }\n                return _extends({}, item);\n            });\n            return _extends({}, state, {\n                snacks: snacks\n            });\n        };\n        /**\r\n     * Set the entered state of the snackbar with the given key.\r\n     */ _this.handleEnteredSnack = function(node, isAppearing, key) {\n            if (!isDefined(key)) {\n                throw new Error(\"handleEnteredSnack Cannot be called with undefined key\");\n            }\n            _this.setState(function(_ref) {\n                var snacks = _ref.snacks;\n                return {\n                    snacks: snacks.map(function(item) {\n                        return item.key === key ? _extends({}, item, {\n                            entered: true\n                        }) : _extends({}, item);\n                    })\n                };\n            });\n        };\n        /**\r\n     * Hide a snackbar after its timeout.\r\n     */ _this.handleCloseSnack = function(event, reason, key) {\n            // should not use createChainedFunction for onClose.\n            // because this.closeSnackbar called this function\n            if (_this.props.onClose) {\n                _this.props.onClose(event, reason, key);\n            }\n            if (reason === REASONS.CLICKAWAY) return;\n            var shouldCloseAll = key === undefined;\n            _this.setState(function(_ref2) {\n                var snacks = _ref2.snacks, queue = _ref2.queue;\n                return {\n                    snacks: snacks.map(function(item) {\n                        if (!shouldCloseAll && item.key !== key) {\n                            return _extends({}, item);\n                        }\n                        return item.entered ? _extends({}, item, {\n                            open: false\n                        }) : _extends({}, item, {\n                            requestClose: true\n                        });\n                    }),\n                    queue: queue.filter(function(item) {\n                        return item.key !== key;\n                    })\n                };\n            });\n        };\n        /**\r\n     * Close snackbar with the given key\r\n     */ _this.closeSnackbar = function(key) {\n            // call individual snackbar onClose callback passed through options parameter\n            var toBeClosed = _this.state.snacks.find(function(item) {\n                return item.key === key;\n            });\n            if (isDefined(key) && toBeClosed && toBeClosed.onClose) {\n                toBeClosed.onClose(null, REASONS.INSTRUCTED, key);\n            }\n            _this.handleCloseSnack(null, REASONS.INSTRUCTED, key);\n        };\n        /**\r\n     * When we set open attribute of a snackbar to false (i.e. after we hide a snackbar),\r\n     * it leaves the screen and immediately after leaving animation is done, this method\r\n     * gets called. We remove the hidden snackbar from state and then display notifications\r\n     * waiting in the queue (if any). If after this process the queue is not empty, the\r\n     * oldest message is dismissed.\r\n     */ // @ts-ignore\n        _this.handleExitedSnack = function(event, key1, key2) {\n            var key = key1 || key2;\n            if (!isDefined(key)) {\n                throw new Error(\"handleExitedSnack Cannot be called with undefined key\");\n            }\n            _this.setState(function(state) {\n                var newState = _this.processQueue(_extends({}, state, {\n                    snacks: state.snacks.filter(function(item) {\n                        return item.key !== key;\n                    })\n                }));\n                if (newState.queue.length === 0) {\n                    return newState;\n                }\n                return _this.handleDismissOldest(newState);\n            });\n        };\n        _this.state = {\n            snacks: [],\n            queue: [],\n            contextValue: {\n                enqueueSnackbar: _this.enqueueSnackbar.bind(_assertThisInitialized(_this)),\n                closeSnackbar: _this.closeSnackbar.bind(_assertThisInitialized(_this))\n            }\n        };\n        return _this;\n    }\n    var _proto = SnackbarProvider.prototype;\n    _proto.render = function render() {\n        var _this2 = this;\n        var contextValue = this.state.contextValue;\n        var _this$props = this.props, iconVariant = _this$props.iconVariant, _this$props$dense = _this$props.dense, dense = _this$props$dense === void 0 ? DEFAULTS.dense : _this$props$dense, _this$props$hideIconV = _this$props.hideIconVariant, hideIconVariant = _this$props$hideIconV === void 0 ? DEFAULTS.hideIconVariant : _this$props$hideIconV, domRoot = _this$props.domRoot, children = _this$props.children, _this$props$classes = _this$props.classes, classes = _this$props$classes === void 0 ? {} : _this$props$classes, props = _objectWithoutPropertiesLoose(_this$props, [\n            \"maxSnack\",\n            \"preventDuplicate\",\n            \"variant\",\n            \"anchorOrigin\",\n            \"iconVariant\",\n            \"dense\",\n            \"hideIconVariant\",\n            \"domRoot\",\n            \"children\",\n            \"classes\"\n        ]);\n        var categ = this.state.snacks.reduce(function(acc, current) {\n            var _extends2;\n            var category = originKeyExtractor(current.anchorOrigin);\n            var existingOfCategory = acc[category] || [];\n            return _extends({}, acc, (_extends2 = {}, _extends2[category] = [].concat(existingOfCategory, [\n                current\n            ]), _extends2));\n        }, {});\n        var snackbars = Object.keys(categ).map(function(origin) {\n            var snacks = categ[origin];\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SnackbarContainer$1, {\n                key: origin,\n                dense: dense,\n                anchorOrigin: snacks[0].anchorOrigin,\n                className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(classes.containerRoot, classes[transformer.toContainerAnchorOrigin(origin)])\n            }, snacks.map(function(snack) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SnackbarItem, Object.assign({}, props, {\n                    key: snack.key,\n                    snack: snack,\n                    dense: dense,\n                    iconVariant: iconVariant,\n                    hideIconVariant: hideIconVariant,\n                    classes: omitContainerKeys(classes),\n                    onClose: _this2.handleCloseSnack,\n                    onExited: createChainedFunction([\n                        _this2.handleExitedSnack,\n                        _this2.props.onExited\n                    ]),\n                    onEntered: createChainedFunction([\n                        _this2.handleEnteredSnack,\n                        _this2.props.onEntered\n                    ])\n                }));\n            }));\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SnackbarContext.Provider, {\n            value: contextValue\n        }, children, domRoot ? /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(snackbars, domRoot) : snackbars);\n    };\n    _createClass(SnackbarProvider, [\n        {\n            key: \"maxSnack\",\n            get: function get() {\n                return this.props.maxSnack || DEFAULTS.maxSnack;\n            }\n        }\n    ]);\n    return SnackbarProvider;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3\nvar fnNameMatchRegex = /^\\s*function(?:\\s|\\s*\\/\\*.*\\*\\/\\s*)+([^(\\s/]*)\\s*/;\nvar getFunctionName = function getFunctionName(fn) {\n    var match = (\"\" + fn).match(fnNameMatchRegex);\n    var name = match && match[1];\n    return name || \"\";\n};\n/**\n * @param {function} Component\n * @param {string} fallback\n * @returns {string | undefined}\n */ var getFunctionComponentName = function getFunctionComponentName(Component, fallback) {\n    if (fallback === void 0) {\n        fallback = \"\";\n    }\n    return Component.displayName || Component.name || getFunctionName(Component) || fallback;\n};\nvar getWrappedName = function getWrappedName(outerType, innerType, wrapperName) {\n    var functionName = getFunctionComponentName(innerType);\n    return outerType.displayName || (functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n};\n/** \n * From react-is\n * @link https://github.com/facebook/react/blob/master/packages/shared/ReactSymbols.js\n */ var ForwardRef = function ForwardRef() {\n    var symbolFor = typeof Symbol === \"function\" && Symbol[\"for\"];\n    return symbolFor ? symbolFor(\"react.forward_ref\") : 0xead0;\n};\n/**\n * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js\n *\n * @param {React.ReactType} Component\n * @returns {string | undefined}\n */ var getDisplayName = function(Component) {\n    if (Component == null) {\n        return undefined;\n    }\n    if (typeof Component === \"string\") {\n        return Component;\n    }\n    if (typeof Component === \"function\") {\n        return getFunctionComponentName(Component, \"Component\");\n    }\n    if (typeof Component === \"object\") {\n        switch(Component.$$typeof){\n            case ForwardRef():\n                return getWrappedName(Component, Component.render, \"ForwardRef\");\n            default:\n                return undefined;\n        }\n    }\n    return undefined;\n};\nvar withSnackbar = function withSnackbar(Component) {\n    var WrappedComponent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(function(props, ref) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SnackbarContext.Consumer, null, function(context) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _extends({}, props, {\n                ref: ref,\n                enqueueSnackbar: context.enqueueSnackbar,\n                closeSnackbar: context.closeSnackbar\n            }));\n        });\n    });\n    if (true) {\n        WrappedComponent.displayName = \"WithSnackbar(\" + getDisplayName(Component) + \")\";\n    }\n    hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_3___default()(WrappedComponent, Component);\n    return WrappedComponent;\n};\nvar useSnackbar = function() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SnackbarContext);\n};\n //# sourceMappingURL=notistack.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/notistack/dist/notistack.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/notistack/node_modules/clsx/dist/clsx.m.js":
/*!*****************************************************************!*\
  !*** ./node_modules/notistack/node_modules/clsx/dist/clsx.m.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: () => (/* binding */ clsx),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction r(e) {\n    var t, f, n = \"\";\n    if (\"string\" == typeof e || \"number\" == typeof e) n += e;\n    else if (\"object\" == typeof e) if (Array.isArray(e)) for(t = 0; t < e.length; t++)e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n    else for(t in e)e[t] && (n && (n += \" \"), n += t);\n    return n;\n}\nfunction clsx() {\n    for(var e, t, f = 0, n = \"\"; f < arguments.length;)(e = arguments[f++]) && (t = r(e)) && (n && (n += \" \"), n += t);\n    return n;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clsx);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm90aXN0YWNrL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsRUFBRUMsQ0FBQztJQUFFLElBQUlDLEdBQUVDLEdBQUVDLElBQUU7SUFBRyxJQUFHLFlBQVUsT0FBT0gsS0FBRyxZQUFVLE9BQU9BLEdBQUVHLEtBQUdIO1NBQU8sSUFBRyxZQUFVLE9BQU9BLEdBQUUsSUFBR0ksTUFBTUMsT0FBTyxDQUFDTCxJQUFHLElBQUlDLElBQUUsR0FBRUEsSUFBRUQsRUFBRU0sTUFBTSxFQUFDTCxJQUFJRCxDQUFDLENBQUNDLEVBQUUsSUFBR0MsQ0FBQUEsSUFBRUgsRUFBRUMsQ0FBQyxDQUFDQyxFQUFFLE1BQUtFLENBQUFBLEtBQUlBLENBQUFBLEtBQUcsR0FBRSxHQUFHQSxLQUFHRCxDQUFBQTtTQUFRLElBQUlELEtBQUtELEVBQUVBLENBQUMsQ0FBQ0MsRUFBRSxJQUFHRSxDQUFBQSxLQUFJQSxDQUFBQSxLQUFHLEdBQUUsR0FBR0EsS0FBR0YsQ0FBQUE7SUFBRyxPQUFPRTtBQUFDO0FBQVEsU0FBU0k7SUFBTyxJQUFJLElBQUlQLEdBQUVDLEdBQUVDLElBQUUsR0FBRUMsSUFBRSxJQUFHRCxJQUFFTSxVQUFVRixNQUFNLEVBQUUsQ0FBQ04sSUFBRVEsU0FBUyxDQUFDTixJQUFJLEtBQUlELENBQUFBLElBQUVGLEVBQUVDLEVBQUMsS0FBS0csQ0FBQUEsS0FBSUEsQ0FBQUEsS0FBRyxHQUFFLEdBQUdBLEtBQUdGLENBQUFBO0lBQUcsT0FBT0U7QUFBQztBQUFDLGlFQUFlSSxJQUFJQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL25vdGlzdGFjay9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcz82OWUwIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKWZvcih0PTA7dDxlLmxlbmd0aDt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpO2Vsc2UgZm9yKHQgaW4gZSllW3RdJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCI7Zjxhcmd1bWVudHMubGVuZ3RoOykoZT1hcmd1bWVudHNbZisrXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyJdLCJuYW1lcyI6WyJyIiwiZSIsInQiLCJmIiwibiIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImNsc3giLCJhcmd1bWVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/notistack/node_modules/clsx/dist/clsx.m.js\n");

/***/ })

};
;