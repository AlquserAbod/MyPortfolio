"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-gfm-strikethrough";
exports.ids = ["vendor-chunks/micromark-extension-gfm-strikethrough"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-gfm-strikethrough/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-strikethrough/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = create;\nvar classifyCharacter = __webpack_require__(/*! micromark/dist/util/classify-character */ \"(ssr)/./node_modules/micromark/dist/util/classify-character.js\");\nvar chunkedSplice = __webpack_require__(/*! micromark/dist/util/chunked-splice */ \"(ssr)/./node_modules/micromark/dist/util/chunked-splice.js\");\nvar resolveAll = __webpack_require__(/*! micromark/dist/util/resolve-all */ \"(ssr)/./node_modules/micromark/dist/util/resolve-all.js\");\nvar shallow = __webpack_require__(/*! micromark/dist/util/shallow */ \"(ssr)/./node_modules/micromark/dist/util/shallow.js\");\nfunction create(options) {\n    var settings = options || {};\n    var single = settings.singleTilde;\n    var tokenizer = {\n        tokenize: tokenizeStrikethrough,\n        resolveAll: resolveAllStrikethrough\n    };\n    if (single === null || single === undefined) {\n        single = true;\n    }\n    return {\n        text: {\n            126: tokenizer\n        },\n        insideSpan: {\n            null: tokenizer\n        }\n    };\n    // Take events and resolve strikethrough.\n    function resolveAllStrikethrough(events, context) {\n        var index = -1;\n        var strikethrough;\n        var text;\n        var open;\n        var nextEvents;\n        // Walk through all events.\n        while(++index < events.length){\n            // Find a token that can close.\n            if (events[index][0] === \"enter\" && events[index][1].type === \"strikethroughSequenceTemporary\" && events[index][1]._close) {\n                open = index;\n                // Now walk back to find an opener.\n                while(open--){\n                    // Find a token that can open the closer.\n                    if (events[open][0] === \"exit\" && events[open][1].type === \"strikethroughSequenceTemporary\" && events[open][1]._open && // If the sizes are the same:\n                    events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n                        events[index][1].type = \"strikethroughSequence\";\n                        events[open][1].type = \"strikethroughSequence\";\n                        strikethrough = {\n                            type: \"strikethrough\",\n                            start: shallow(events[open][1].start),\n                            end: shallow(events[index][1].end)\n                        };\n                        text = {\n                            type: \"strikethroughText\",\n                            start: shallow(events[open][1].end),\n                            end: shallow(events[index][1].start)\n                        };\n                        // Opening.\n                        nextEvents = [\n                            [\n                                \"enter\",\n                                strikethrough,\n                                context\n                            ],\n                            [\n                                \"enter\",\n                                events[open][1],\n                                context\n                            ],\n                            [\n                                \"exit\",\n                                events[open][1],\n                                context\n                            ],\n                            [\n                                \"enter\",\n                                text,\n                                context\n                            ]\n                        ];\n                        // Between.\n                        chunkedSplice(nextEvents, nextEvents.length, 0, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n                        // Closing.\n                        chunkedSplice(nextEvents, nextEvents.length, 0, [\n                            [\n                                \"exit\",\n                                text,\n                                context\n                            ],\n                            [\n                                \"enter\",\n                                events[index][1],\n                                context\n                            ],\n                            [\n                                \"exit\",\n                                events[index][1],\n                                context\n                            ],\n                            [\n                                \"exit\",\n                                strikethrough,\n                                context\n                            ]\n                        ]);\n                        chunkedSplice(events, open - 1, index - open + 3, nextEvents);\n                        index = open + nextEvents.length - 2;\n                        break;\n                    }\n                }\n            }\n        }\n        return removeRemainingSequences(events);\n    }\n    function removeRemainingSequences(events) {\n        var index = -1;\n        var length = events.length;\n        while(++index < length){\n            if (events[index][1].type === \"strikethroughSequenceTemporary\") {\n                events[index][1].type = \"data\";\n            }\n        }\n        return events;\n    }\n    function tokenizeStrikethrough(effects, ok, nok) {\n        var previous = this.previous;\n        var events = this.events;\n        var size = 0;\n        return start;\n        function start(code) {\n            if (code !== 126 || previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n                return nok(code);\n            }\n            effects.enter(\"strikethroughSequenceTemporary\");\n            return more(code);\n        }\n        function more(code) {\n            var before = classifyCharacter(previous);\n            var token;\n            var after;\n            if (code === 126) {\n                // If this is the third marker, exit.\n                if (size > 1) return nok(code);\n                effects.consume(code);\n                size++;\n                return more;\n            }\n            if (size < 2 && !single) return nok(code);\n            token = effects.exit(\"strikethroughSequenceTemporary\");\n            after = classifyCharacter(code);\n            token._open = !after || after === 2 && before;\n            token._close = !before || before === 2 && after;\n            return ok(code);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-strikethrough/index.js\n");

/***/ })

};
;