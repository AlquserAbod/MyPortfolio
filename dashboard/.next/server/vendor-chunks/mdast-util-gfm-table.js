/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-gfm-table";
exports.ids = ["vendor-chunks/mdast-util-gfm-table"];
exports.modules = {

/***/ "(ssr)/./node_modules/mdast-util-gfm-table/from-markdown.js":
/*!************************************************************!*\
  !*** ./node_modules/mdast-util-gfm-table/from-markdown.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.enter = {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n};\nexports.exit = {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n};\nfunction enterTable(token) {\n    this.enter({\n        type: \"table\",\n        align: token._align,\n        children: []\n    }, token);\n    this.setData(\"inTable\", true);\n}\nfunction exitTable(token) {\n    this.exit(token);\n    this.setData(\"inTable\");\n}\nfunction enterRow(token) {\n    this.enter({\n        type: \"tableRow\",\n        children: []\n    }, token);\n}\nfunction exit(token) {\n    this.exit(token);\n}\nfunction enterCell(token) {\n    this.enter({\n        type: \"tableCell\",\n        children: []\n    }, token);\n}\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\nfunction exitCodeText(token) {\n    var value = this.resume();\n    if (this.getData(\"inTable\")) {\n        value = value.replace(/\\\\([\\\\|])/g, replace);\n    }\n    this.stack[this.stack.length - 1].value = value;\n    this.exit(token);\n}\nfunction replace($0, $1) {\n    // Pipes work, backslashes don’t (but can’t escape pipes).\n    return $1 === \"|\" ? $1 : $0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1nZm0tdGFibGUvZnJvbS1tYXJrZG93bi5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsYUFBYSxHQUFHO0lBQ2RFLE9BQU9DO0lBQ1BDLFdBQVdDO0lBQ1hDLGFBQWFEO0lBQ2JFLFVBQVVDO0FBQ1o7QUFDQVIsWUFBWSxHQUFHO0lBQ2JVLFVBQVVDO0lBQ1ZULE9BQU9VO0lBQ1BSLFdBQVdLO0lBQ1hILGFBQWFHO0lBQ2JGLFVBQVVFO0FBQ1o7QUFFQSxTQUFTTixXQUFXVSxLQUFLO0lBQ3ZCLElBQUksQ0FBQ1osS0FBSyxDQUFDO1FBQUNhLE1BQU07UUFBU0MsT0FBT0YsTUFBTUcsTUFBTTtRQUFFQyxVQUFVLEVBQUU7SUFBQSxHQUFHSjtJQUMvRCxJQUFJLENBQUNLLE9BQU8sQ0FBQyxXQUFXO0FBQzFCO0FBRUEsU0FBU04sVUFBVUMsS0FBSztJQUN0QixJQUFJLENBQUNKLElBQUksQ0FBQ0k7SUFDVixJQUFJLENBQUNLLE9BQU8sQ0FBQztBQUNmO0FBRUEsU0FBU1YsU0FBU0ssS0FBSztJQUNyQixJQUFJLENBQUNaLEtBQUssQ0FBQztRQUFDYSxNQUFNO1FBQVlHLFVBQVUsRUFBRTtJQUFBLEdBQUdKO0FBQy9DO0FBRUEsU0FBU0osS0FBS0ksS0FBSztJQUNqQixJQUFJLENBQUNKLElBQUksQ0FBQ0k7QUFDWjtBQUVBLFNBQVNSLFVBQVVRLEtBQUs7SUFDdEIsSUFBSSxDQUFDWixLQUFLLENBQUM7UUFBQ2EsTUFBTTtRQUFhRyxVQUFVLEVBQUU7SUFBQSxHQUFHSjtBQUNoRDtBQUVBLDhFQUE4RTtBQUM5RSxzQkFBc0I7QUFDdEIsU0FBU0YsYUFBYUUsS0FBSztJQUN6QixJQUFJTSxRQUFRLElBQUksQ0FBQ0MsTUFBTTtJQUV2QixJQUFJLElBQUksQ0FBQ0MsT0FBTyxDQUFDLFlBQVk7UUFDM0JGLFFBQVFBLE1BQU1HLE9BQU8sQ0FBQyxjQUFjQTtJQUN0QztJQUVBLElBQUksQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDQyxNQUFNLEdBQUcsRUFBRSxDQUFDTCxLQUFLLEdBQUdBO0lBQzFDLElBQUksQ0FBQ1YsSUFBSSxDQUFDSTtBQUNaO0FBRUEsU0FBU1MsUUFBUUcsRUFBRSxFQUFFQyxFQUFFO0lBQ3JCLDBEQUEwRDtJQUMxRCxPQUFPQSxPQUFPLE1BQU1BLEtBQUtEO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZ2ZtLXRhYmxlL2Zyb20tbWFya2Rvd24uanM/N2NiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmVudGVyID0ge1xuICB0YWJsZTogZW50ZXJUYWJsZSxcbiAgdGFibGVEYXRhOiBlbnRlckNlbGwsXG4gIHRhYmxlSGVhZGVyOiBlbnRlckNlbGwsXG4gIHRhYmxlUm93OiBlbnRlclJvd1xufVxuZXhwb3J0cy5leGl0ID0ge1xuICBjb2RlVGV4dDogZXhpdENvZGVUZXh0LFxuICB0YWJsZTogZXhpdFRhYmxlLFxuICB0YWJsZURhdGE6IGV4aXQsXG4gIHRhYmxlSGVhZGVyOiBleGl0LFxuICB0YWJsZVJvdzogZXhpdFxufVxuXG5mdW5jdGlvbiBlbnRlclRhYmxlKHRva2VuKSB7XG4gIHRoaXMuZW50ZXIoe3R5cGU6ICd0YWJsZScsIGFsaWduOiB0b2tlbi5fYWxpZ24sIGNoaWxkcmVuOiBbXX0sIHRva2VuKVxuICB0aGlzLnNldERhdGEoJ2luVGFibGUnLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBleGl0VGFibGUodG9rZW4pIHtcbiAgdGhpcy5leGl0KHRva2VuKVxuICB0aGlzLnNldERhdGEoJ2luVGFibGUnKVxufVxuXG5mdW5jdGlvbiBlbnRlclJvdyh0b2tlbikge1xuICB0aGlzLmVudGVyKHt0eXBlOiAndGFibGVSb3cnLCBjaGlsZHJlbjogW119LCB0b2tlbilcbn1cblxuZnVuY3Rpb24gZXhpdCh0b2tlbikge1xuICB0aGlzLmV4aXQodG9rZW4pXG59XG5cbmZ1bmN0aW9uIGVudGVyQ2VsbCh0b2tlbikge1xuICB0aGlzLmVudGVyKHt0eXBlOiAndGFibGVDZWxsJywgY2hpbGRyZW46IFtdfSwgdG9rZW4pXG59XG5cbi8vIE92ZXJ3cml0ZSB0aGUgZGVmYXVsdCBjb2RlIHRleHQgZGF0YSBoYW5kbGVyIHRvIHVuZXNjYXBlIGVzY2FwZWQgcGlwZXMgd2hlblxuLy8gdGhleSBhcmUgaW4gdGFibGVzLlxuZnVuY3Rpb24gZXhpdENvZGVUZXh0KHRva2VuKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMucmVzdW1lKClcblxuICBpZiAodGhpcy5nZXREYXRhKCdpblRhYmxlJykpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcXFwoW1xcXFx8XSkvZywgcmVwbGFjZSlcbiAgfVxuXG4gIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHZhbHVlXG4gIHRoaXMuZXhpdCh0b2tlbilcbn1cblxuZnVuY3Rpb24gcmVwbGFjZSgkMCwgJDEpIHtcbiAgLy8gUGlwZXMgd29yaywgYmFja3NsYXNoZXMgZG9u4oCZdCAoYnV0IGNhbuKAmXQgZXNjYXBlIHBpcGVzKS5cbiAgcmV0dXJuICQxID09PSAnfCcgPyAkMSA6ICQwXG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsImVudGVyIiwidGFibGUiLCJlbnRlclRhYmxlIiwidGFibGVEYXRhIiwiZW50ZXJDZWxsIiwidGFibGVIZWFkZXIiLCJ0YWJsZVJvdyIsImVudGVyUm93IiwiZXhpdCIsImNvZGVUZXh0IiwiZXhpdENvZGVUZXh0IiwiZXhpdFRhYmxlIiwidG9rZW4iLCJ0eXBlIiwiYWxpZ24iLCJfYWxpZ24iLCJjaGlsZHJlbiIsInNldERhdGEiLCJ2YWx1ZSIsInJlc3VtZSIsImdldERhdGEiLCJyZXBsYWNlIiwic3RhY2siLCJsZW5ndGgiLCIkMCIsIiQxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-gfm-table/from-markdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mdast-util-gfm-table/to-markdown.js":
/*!**********************************************************!*\
  !*** ./node_modules/mdast-util-gfm-table/to-markdown.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar phrasing = __webpack_require__(/*! mdast-util-to-markdown/lib/util/container-phrasing */ \"(ssr)/./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js\");\nvar defaultInlineCode = __webpack_require__(/*! mdast-util-to-markdown/lib/handle/inline-code */ \"(ssr)/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js\");\nvar markdownTable = __webpack_require__(/*! markdown-table */ \"(ssr)/./node_modules/markdown-table/index.js\");\nmodule.exports = toMarkdown;\nfunction toMarkdown(options) {\n    var settings = options || {};\n    var padding = settings.tableCellPadding;\n    var alignDelimiters = settings.tablePipeAlign;\n    var stringLength = settings.stringLength;\n    var around = padding ? \" \" : \"|\";\n    return {\n        unsafe: [\n            {\n                character: \"\\r\",\n                inConstruct: \"tableCell\"\n            },\n            {\n                character: \"\\n\",\n                inConstruct: \"tableCell\"\n            },\n            // A pipe, when followed by a tab or space (padding), or a dash or colon\n            // (unpadded delimiter row), could result in a table.\n            {\n                atBreak: true,\n                character: \"|\",\n                after: \"[\t :-]\"\n            },\n            // A pipe in a cell must be encoded.\n            {\n                character: \"|\",\n                inConstruct: \"tableCell\"\n            },\n            // A colon must be followed by a dash, in which case it could start a\n            // delimiter row.\n            {\n                atBreak: true,\n                character: \":\",\n                after: \"-\"\n            },\n            // A delimiter row can also start with a dash, when followed by more\n            // dashes, a colon, or a pipe.\n            // This is a stricter version than the built in check for lists, thematic\n            // breaks, and setex heading underlines though:\n            // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n            {\n                atBreak: true,\n                character: \"-\",\n                after: \"[:|-]\"\n            }\n        ],\n        handlers: {\n            table: handleTable,\n            tableRow: handleTableRow,\n            tableCell: handleTableCell,\n            inlineCode: inlineCodeWithTable\n        }\n    };\n    function handleTable(node, _, context) {\n        return serializeData(handleTableAsData(node, context), node.align);\n    }\n    // This function isn’t really used normally, because we handle rows at the\n    // table level.\n    // But, if someone passes in a table row, this ensures we make somewhat sense.\n    function handleTableRow(node, _, context) {\n        var row = handleTableRowAsData(node, context);\n        // `markdown-table` will always add an align row\n        var value = serializeData([\n            row\n        ]);\n        return value.slice(0, value.indexOf(\"\\n\"));\n    }\n    function handleTableCell(node, _, context) {\n        var exit = context.enter(\"tableCell\");\n        var value = phrasing(node, context, {\n            before: around,\n            after: around\n        });\n        exit();\n        return value;\n    }\n    function serializeData(matrix, align) {\n        return markdownTable(matrix, {\n            align: align,\n            alignDelimiters: alignDelimiters,\n            padding: padding,\n            stringLength: stringLength\n        });\n    }\n    function handleTableAsData(node, context) {\n        var children = node.children;\n        var index = -1;\n        var length = children.length;\n        var result = [];\n        var subexit = context.enter(\"table\");\n        while(++index < length){\n            result[index] = handleTableRowAsData(children[index], context);\n        }\n        subexit();\n        return result;\n    }\n    function handleTableRowAsData(node, context) {\n        var children = node.children;\n        var index = -1;\n        var length = children.length;\n        var result = [];\n        var subexit = context.enter(\"tableRow\");\n        while(++index < length){\n            result[index] = handleTableCell(children[index], node, context);\n        }\n        subexit();\n        return result;\n    }\n    function inlineCodeWithTable(node, parent, context) {\n        var value = defaultInlineCode(node, parent, context);\n        if (context.stack.indexOf(\"tableCell\") !== -1) {\n            value = value.replace(/\\|/g, \"\\\\$&\");\n        }\n        return value;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-gfm-table/to-markdown.js\n");

/***/ })

};
;